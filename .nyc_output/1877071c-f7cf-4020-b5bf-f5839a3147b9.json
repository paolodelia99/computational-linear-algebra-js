{"C:\\Users\\paolo\\WebstormProjects\\linear-algebra.js\\src\\linearTrasformation.js":{"path":"C:\\Users\\paolo\\WebstormProjects\\linear-algebra.js\\src\\linearTrasformation.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"2":{"start":{"line":8,"column":14},"end":{"line":8,"column":57}},"3":{"start":{"line":10,"column":17},"end":{"line":10,"column":45}},"4":{"start":{"line":12,"column":39},"end":{"line":12,"column":95}},"5":{"start":{"line":14,"column":50},"end":{"line":14,"column":151}},"6":{"start":{"line":14,"column":92},"end":{"line":14,"column":149}},"7":{"start":{"line":16,"column":44},"end":{"line":16,"column":315}},"8":{"start":{"line":16,"column":57},"end":{"line":16,"column":58}},"9":{"start":{"line":16,"column":102},"end":{"line":16,"column":110}},"10":{"start":{"line":16,"column":112},"end":{"line":16,"column":167}},"11":{"start":{"line":16,"column":168},"end":{"line":16,"column":199}},"12":{"start":{"line":16,"column":200},"end":{"line":16,"column":254}},"13":{"start":{"line":16,"column":227},"end":{"line":16,"column":254}},"14":{"start":{"line":16,"column":255},"end":{"line":16,"column":313}},"15":{"start":{"line":18,"column":62},"end":{"line":18,"column":131}},"16":{"start":{"line":18,"column":78},"end":{"line":18,"column":131}},"17":{"start":{"line":18,"column":132},"end":{"line":18,"column":193}},"18":{"start":{"line":18,"column":149},"end":{"line":18,"column":193}},"19":{"start":{"line":18,"column":194},"end":{"line":18,"column":213}},"20":{"start":{"line":20,"column":44},"end":{"line":20,"column":195}},"21":{"start":{"line":20,"column":62},"end":{"line":20,"column":166}},"22":{"start":{"line":20,"column":176},"end":{"line":20,"column":193}},"23":{"start":{"line":20,"column":196},"end":{"line":20,"column":207}},"24":{"start":{"line":22,"column":40},"end":{"line":67,"column":3}},"25":{"start":{"line":28,"column":16},"end":{"line":28,"column":20}},"26":{"start":{"line":30,"column":4},"end":{"line":30,"column":48}},"27":{"start":{"line":32,"column":4},"end":{"line":32,"column":59}},"28":{"start":{"line":34,"column":4},"end":{"line":36,"column":7}},"29":{"start":{"line":35,"column":6},"end":{"line":35,"column":77}},"30":{"start":{"line":38,"column":4},"end":{"line":40,"column":7}},"31":{"start":{"line":39,"column":6},"end":{"line":39,"column":78}},"32":{"start":{"line":42,"column":4},"end":{"line":42,"column":114}},"33":{"start":{"line":43,"column":4},"end":{"line":43,"column":54}},"34":{"start":{"line":45,"column":4},"end":{"line":45,"column":56}},"35":{"start":{"line":55,"column":2},"end":{"line":64,"column":6}},"36":{"start":{"line":62,"column":6},"end":{"line":62,"column":40}},"37":{"start":{"line":66,"column":2},"end":{"line":66,"column":30}},"38":{"start":{"line":69,"column":0},"end":{"line":92,"column":3}},"39":{"start":{"line":72,"column":18},"end":{"line":72,"column":67}},"40":{"start":{"line":73,"column":18},"end":{"line":73,"column":67}},"41":{"start":{"line":75,"column":2},"end":{"line":91,"column":3}},"42":{"start":{"line":76,"column":4},"end":{"line":76,"column":62}},"43":{"start":{"line":78,"column":20},"end":{"line":78,"column":43}},"44":{"start":{"line":80,"column":4},"end":{"line":88,"column":5}},"45":{"start":{"line":80,"column":17},"end":{"line":80,"column":18}},"46":{"start":{"line":81,"column":6},"end":{"line":87,"column":12}},"47":{"start":{"line":82,"column":8},"end":{"line":84,"column":14}},"48":{"start":{"line":83,"column":10},"end":{"line":83,"column":23}},"49":{"start":{"line":86,"column":8},"end":{"line":86,"column":21}},"50":{"start":{"line":90,"column":4},"end":{"line":90,"column":21}},"51":{"start":{"line":94,"column":0},"end":{"line":98,"column":3}},"52":{"start":{"line":95,"column":19},"end":{"line":95,"column":64}},"53":{"start":{"line":97,"column":2},"end":{"line":97,"column":51}},"54":{"start":{"line":100,"column":15},"end":{"line":100,"column":35}},"55":{"start":{"line":101,"column":0},"end":{"line":101,"column":30}}},"fnMap":{"0":{"name":"_interopRequireDefault","decl":{"start":{"line":12,"column":9},"end":{"line":12,"column":31}},"loc":{"start":{"line":12,"column":37},"end":{"line":12,"column":97}},"line":12},"1":{"name":"_classCallCheck","decl":{"start":{"line":14,"column":9},"end":{"line":14,"column":24}},"loc":{"start":{"line":14,"column":48},"end":{"line":14,"column":153}},"line":14},"2":{"name":"_defineProperties","decl":{"start":{"line":16,"column":9},"end":{"line":16,"column":26}},"loc":{"start":{"line":16,"column":42},"end":{"line":16,"column":317}},"line":16},"3":{"name":"_createClass","decl":{"start":{"line":18,"column":9},"end":{"line":18,"column":21}},"loc":{"start":{"line":18,"column":60},"end":{"line":18,"column":215}},"line":18},"4":{"name":"_defineProperty","decl":{"start":{"line":20,"column":9},"end":{"line":20,"column":24}},"loc":{"start":{"line":20,"column":42},"end":{"line":20,"column":209}},"line":20},"5":{"name":"(anonymous_5)","decl":{"start":{"line":22,"column":40},"end":{"line":22,"column":41}},"loc":{"start":{"line":22,"column":52},"end":{"line":67,"column":1}},"line":22},"6":{"name":"LinearTransformation","decl":{"start":{"line":27,"column":11},"end":{"line":27,"column":31}},"loc":{"start":{"line":27,"column":51},"end":{"line":46,"column":3}},"line":27},"7":{"name":"(anonymous_7)","decl":{"start":{"line":34,"column":35},"end":{"line":34,"column":36}},"loc":{"start":{"line":34,"column":53},"end":{"line":36,"column":5}},"line":34},"8":{"name":"(anonymous_8)","decl":{"start":{"line":38,"column":42},"end":{"line":38,"column":43}},"loc":{"start":{"line":38,"column":55},"end":{"line":40,"column":5}},"line":38},"9":{"name":"get","decl":{"start":{"line":61,"column":18},"end":{"line":61,"column":21}},"loc":{"start":{"line":61,"column":24},"end":{"line":63,"column":5}},"line":61},"10":{"name":"(anonymous_10)","decl":{"start":{"line":69,"column":47},"end":{"line":69,"column":48}},"loc":{"start":{"line":69,"column":73},"end":{"line":92,"column":1}},"line":69},"11":{"name":"(anonymous_11)","decl":{"start":{"line":81,"column":70},"end":{"line":81,"column":71}},"loc":{"start":{"line":81,"column":83},"end":{"line":85,"column":7}},"line":81},"12":{"name":"(anonymous_12)","decl":{"start":{"line":82,"column":24},"end":{"line":82,"column":25}},"loc":{"start":{"line":82,"column":40},"end":{"line":84,"column":9}},"line":82},"13":{"name":"(anonymous_13)","decl":{"start":{"line":85,"column":16},"end":{"line":85,"column":17}},"loc":{"start":{"line":85,"column":32},"end":{"line":87,"column":7}},"line":85},"14":{"name":"(anonymous_14)","decl":{"start":{"line":94,"column":54},"end":{"line":94,"column":55}},"loc":{"start":{"line":94,"column":83},"end":{"line":98,"column":1}},"line":94}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":46},"end":{"line":12,"column":94}},"type":"cond-expr","locations":[{"start":{"line":12,"column":70},"end":{"line":12,"column":73}},{"start":{"line":12,"column":76},"end":{"line":12,"column":94}}],"line":12},"1":{"loc":{"start":{"line":12,"column":46},"end":{"line":12,"column":67}},"type":"binary-expr","locations":[{"start":{"line":12,"column":46},"end":{"line":12,"column":49}},{"start":{"line":12,"column":53},"end":{"line":12,"column":67}}],"line":12},"2":{"loc":{"start":{"line":14,"column":50},"end":{"line":14,"column":151}},"type":"if","locations":[{"start":{"line":14,"column":50},"end":{"line":14,"column":151}},{"start":{"line":14,"column":50},"end":{"line":14,"column":151}}],"line":14},"3":{"loc":{"start":{"line":16,"column":136},"end":{"line":16,"column":166}},"type":"binary-expr","locations":[{"start":{"line":16,"column":136},"end":{"line":16,"column":157}},{"start":{"line":16,"column":161},"end":{"line":16,"column":166}}],"line":16},"4":{"loc":{"start":{"line":16,"column":200},"end":{"line":16,"column":254}},"type":"if","locations":[{"start":{"line":16,"column":200},"end":{"line":16,"column":254}},{"start":{"line":16,"column":200},"end":{"line":16,"column":254}}],"line":16},"5":{"loc":{"start":{"line":18,"column":62},"end":{"line":18,"column":131}},"type":"if","locations":[{"start":{"line":18,"column":62},"end":{"line":18,"column":131}},{"start":{"line":18,"column":62},"end":{"line":18,"column":131}}],"line":18},"6":{"loc":{"start":{"line":18,"column":132},"end":{"line":18,"column":193}},"type":"if","locations":[{"start":{"line":18,"column":132},"end":{"line":18,"column":193}},{"start":{"line":18,"column":132},"end":{"line":18,"column":193}}],"line":18},"7":{"loc":{"start":{"line":20,"column":44},"end":{"line":20,"column":195}},"type":"if","locations":[{"start":{"line":20,"column":44},"end":{"line":20,"column":195}},{"start":{"line":20,"column":44},"end":{"line":20,"column":195}}],"line":20},"8":{"loc":{"start":{"line":42,"column":33},"end":{"line":42,"column":113}},"type":"cond-expr","locations":[{"start":{"line":42,"column":69},"end":{"line":42,"column":93}},{"start":{"line":42,"column":96},"end":{"line":42,"column":113}}],"line":42},"9":{"loc":{"start":{"line":72,"column":18},"end":{"line":72,"column":67}},"type":"cond-expr","locations":[{"start":{"line":72,"column":42},"end":{"line":72,"column":48}},{"start":{"line":72,"column":51},"end":{"line":72,"column":67}}],"line":72},"10":{"loc":{"start":{"line":73,"column":18},"end":{"line":73,"column":67}},"type":"cond-expr","locations":[{"start":{"line":73,"column":42},"end":{"line":73,"column":48}},{"start":{"line":73,"column":51},"end":{"line":73,"column":67}}],"line":73},"11":{"loc":{"start":{"line":75,"column":2},"end":{"line":91,"column":3}},"type":"if","locations":[{"start":{"line":75,"column":2},"end":{"line":91,"column":3}},{"start":{"line":75,"column":2},"end":{"line":91,"column":3}}],"line":75}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":3,"6":0,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":1,"15":1,"16":1,"17":1,"18":0,"19":1,"20":11,"21":1,"22":10,"23":11,"24":1,"25":3,"26":3,"27":3,"28":3,"29":1,"30":3,"31":0,"32":3,"33":3,"34":3,"35":1,"36":8,"37":1,"38":1,"39":2,"40":2,"41":2,"42":0,"43":2,"44":2,"45":2,"46":6,"47":21,"48":42,"49":21,"50":2,"51":1,"52":0,"53":0,"54":1,"55":1},"f":{"0":1,"1":3,"2":1,"3":1,"4":11,"5":1,"6":3,"7":1,"8":0,"9":8,"10":2,"11":21,"12":42,"13":21,"14":0},"b":{"0":[1,0],"1":[1,1],"2":[0,3],"3":[1,1],"4":[0,1],"5":[1,0],"6":[0,1],"7":[1,10],"8":[2,1],"9":[1,1],"10":[2,0],"11":[0,2]},"inputSourceMap":{"version":3,"sources":["linearTrasformation.js"],"names":["LinearTransformation","matTransformation","vector","apply","_transformationMatrix","x","applyInverse","transformationMatrix","Array","isArray","matrix","domainDim","length","imageDim","refVector","getCopy","refMatrix","Error","resVector","i","map","reduce","a","b","transformation","inverseMat","Matrix","getInverse"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;IAEMA,oB;AAGF;;;;AAIA,gCAAaC,iBAAb,EAAgC;AAAA;;AAAA;;AAAA;;AAAA,mCAoCxB,UAAAC,MAAM;AAAA,aAAIF,oBAAoB,CAACG,KAArB,CAA2B,KAAI,CAACC,qBAAhC,EAAuDF,MAAvD,CAAJ;AAAA,KApCkB;;AAAA,0CAuDjB,UAAAG,CAAC;AAAA,aAAIL,oBAAoB,CAACM,YAArB,CAAkC,KAAI,CAACC,oBAAvC,EAA6DF,CAA7D,CAAJ;AAAA,KAvDgB;;AAC9B,SAAKD,qBAAL,GAA6B,CAACI,KAAK,CAACC,OAAN,CAAcR,iBAAd,CAAD,GAAoCA,iBAAiB,CAACS,MAAtD,GAA+DT,iBAA5F;AACA,SAAKU,SAAL,GAAiB,KAAKJ,oBAAL,CAA0BK,MAA3C,CAF8B,CAEoB;;AAClD,SAAKC,QAAL,GAAgB,KAAKN,oBAAL,CAA0B,CAA1B,EAA6BK,MAA7C,CAH8B,CAGsB;AACrD;AAED;;;;;;;;;;;AAmDA;;;wBAG4B;AAC1B,aAAO,KAAKR,qBAAZ;AACD;;;;;;gBArECJ,oB,WAmBa,UAACU,MAAD,EAASR,MAAT,EAAoB;AACjC;AAEA;AACA,MAAMY,SAAS,GAAGN,KAAK,CAACC,OAAN,CAAcP,MAAd,IAAwBA,MAAxB,GAAiCA,MAAM,CAACa,OAAP,EAAnD;AACA,MAAMC,SAAS,GAAGR,KAAK,CAACC,OAAN,CAAcC,MAAd,IAAwBA,MAAxB,GAAiCA,MAAM,CAACK,OAAP,EAAnD;;AACA,MAAID,SAAS,CAACF,MAAV,KAAqBI,SAAS,CAAC,CAAD,CAAT,CAAaJ,MAAtC,EAA8C;AAC5C,UAAM,IAAIK,KAAJ,CAAU,wCAAV,CAAN;AACD,GAFD,MAEO;AACL,QAAMC,SAAS,GAAGV,KAAK,CAACQ,SAAS,CAACJ,MAAX,CAAvB;;AAEA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,MAAM,CAACE,MAA3B,EAAmCO,CAAC,EAApC,EAAwC;AACtCD,MAAAA,SAAS,CAACC,CAAD,CAAT,GAAgB,oBAAIH,SAAS,CAACG,CAAD,CAAb,EAAkBL,SAAlB,EAA6BM,GAA7B,CAAiC,UAAAf,CAAC;AAAA,eAAIA,CAAC,CAACgB,MAAF,CAAS,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAUD,CAAC,GAAGC,CAAd;AAAA,SAAT,EAA0B,CAA1B,CAAJ;AAAA,OAAlC,CAAD,CAAsEF,MAAtE,CAA6E,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUD,CAAC,GAAGC,CAAd;AAAA,OAA7E,EAA8F,CAA9F,CAAf;AACD;;AAED,WAAOL,SAAP;AACD;AACF,C;;gBApCClB,oB,kBAoDoB,UAACwB,cAAD,EAAiBnB,CAAjB,EAAuB;AAC3C,MAAMoB,UAAU,GAAGC,mBAAOC,UAAP,CAAkBH,cAAlB,CAAnB;;AACA,SAAOxB,oBAAoB,CAACG,KAArB,CAA2BsB,UAA3B,EAAuCpB,CAAvC,CAAP;AACD,C;;eAiBUL,oB","sourceRoot":"C:\\Users\\paolo\\WebstormProjects\\linear-algebra.js\\src\\","sourcesContent":["import Matrix from './matrix'\r\nimport { zip } from './utils/functions'\r\n\r\nclass LinearTransformation {\r\n    _transformationMatrix\r\n\r\n    /**\r\n     * Constructor for the linearTransformation\r\n     * @param {number[][]| Matrix} matTransformation\r\n     */\r\n    constructor (matTransformation) {\r\n      this._transformationMatrix = !Array.isArray(matTransformation) ? matTransformation.matrix : matTransformation\r\n      this.domainDim = this.transformationMatrix.length // row of the associated matrix\r\n      this.imageDim = this.transformationMatrix[0].length // col of the associated matrix\r\n    }\r\n\r\n    /**\r\n     * Apply the give linear transformation\r\n     * @param {number[][] | Matrix}matrix\r\n     * @param {number[] | Vector} vector\r\n     * @returns {number[]} the transformed vector\r\n     */\r\n    static apply = (matrix, vector) => {\r\n      // fixme: implement also for the matrix\r\n\r\n      // Check matrix vector compatibility\r\n      const refVector = Array.isArray(vector) ? vector : vector.getCopy()\r\n      const refMatrix = Array.isArray(matrix) ? matrix : matrix.getCopy()\r\n      if (refVector.length !== refMatrix[0].length) {\r\n        throw new Error('Cannot apply the linear Transformation')\r\n      } else {\r\n        const resVector = Array(refMatrix.length)\r\n\r\n        for (let i = 0; i < matrix.length; i++) {\r\n          resVector[i] = (zip(refMatrix[i], refVector).map(x => x.reduce((a, b) => a * b, 1))).reduce((a, b) => a + b, 0)\r\n        }\r\n\r\n        return resVector\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Apply the linear Transformation to the give vector\r\n     * @param {number[]} vector\r\n     * @returns {number[]} the transformed vector\r\n     */\r\n    apply = vector => LinearTransformation.apply(this._transformationMatrix, vector);\r\n\r\n    // todo: to test\r\n    /**\r\n     * Apply the inverse mapping of the given transformation\r\n     * @param {number[][] | Matrix} transformation\r\n     * @param {number[] | Vector | number[][] | Matrix} x\r\n     * @returns {number[] | number[][]}\r\n     */\r\n    static applyInverse = (transformation, x) => {\r\n      const inverseMat = Matrix.getInverse(transformation)\r\n      return LinearTransformation.apply(inverseMat, x)\r\n    };\r\n\r\n    /**\r\n     * Instance method that apply the inverse mapping\r\n     * @param {number[] | Vector | number[][] | Matrix} x\r\n     * @returns {number[]|number[][]}\r\n     */\r\n    applyInverse = x => LinearTransformation.applyInverse(this.transformationMatrix, x);\r\n\r\n    /**\r\n     * @returns {number[][]} the matrix transformation\r\n     */\r\n    get transformationMatrix () {\r\n      return this._transformationMatrix\r\n    }\r\n}\r\n\r\nexport default LinearTransformation\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"70f7be3d76e2cbe02693271f89bbfc68f8de7472","contentHash":"599a425b422fc1b531eac13a0d9472f9db2dc1468ef362a62e011dd028c0b22f"},"C:\\Users\\paolo\\WebstormProjects\\linear-algebra.js\\src\\matrix.js":{"path":"C:\\Users\\paolo\\WebstormProjects\\linear-algebra.js\\src\\matrix.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"2":{"start":{"line":8,"column":50},"end":{"line":8,"column":151}},"3":{"start":{"line":8,"column":92},"end":{"line":8,"column":149}},"4":{"start":{"line":10,"column":44},"end":{"line":10,"column":315}},"5":{"start":{"line":10,"column":57},"end":{"line":10,"column":58}},"6":{"start":{"line":10,"column":102},"end":{"line":10,"column":110}},"7":{"start":{"line":10,"column":112},"end":{"line":10,"column":167}},"8":{"start":{"line":10,"column":168},"end":{"line":10,"column":199}},"9":{"start":{"line":10,"column":200},"end":{"line":10,"column":254}},"10":{"start":{"line":10,"column":227},"end":{"line":10,"column":254}},"11":{"start":{"line":10,"column":255},"end":{"line":10,"column":313}},"12":{"start":{"line":12,"column":62},"end":{"line":12,"column":131}},"13":{"start":{"line":12,"column":78},"end":{"line":12,"column":131}},"14":{"start":{"line":12,"column":132},"end":{"line":12,"column":193}},"15":{"start":{"line":12,"column":149},"end":{"line":12,"column":193}},"16":{"start":{"line":12,"column":194},"end":{"line":12,"column":213}},"17":{"start":{"line":14,"column":44},"end":{"line":14,"column":195}},"18":{"start":{"line":14,"column":62},"end":{"line":14,"column":166}},"19":{"start":{"line":14,"column":176},"end":{"line":14,"column":193}},"20":{"start":{"line":14,"column":196},"end":{"line":14,"column":207}},"21":{"start":{"line":16,"column":26},"end":{"line":168,"column":3}},"22":{"start":{"line":26,"column":16},"end":{"line":26,"column":20}},"23":{"start":{"line":28,"column":4},"end":{"line":28,"column":34}},"24":{"start":{"line":30,"column":4},"end":{"line":30,"column":43}},"25":{"start":{"line":32,"column":4},"end":{"line":32,"column":43}},"26":{"start":{"line":34,"column":4},"end":{"line":36,"column":7}},"27":{"start":{"line":35,"column":6},"end":{"line":35,"column":44}},"28":{"start":{"line":38,"column":4},"end":{"line":40,"column":7}},"29":{"start":{"line":39,"column":6},"end":{"line":39,"column":46}},"30":{"start":{"line":42,"column":4},"end":{"line":44,"column":7}},"31":{"start":{"line":43,"column":6},"end":{"line":43,"column":50}},"32":{"start":{"line":46,"column":4},"end":{"line":48,"column":7}},"33":{"start":{"line":47,"column":6},"end":{"line":47,"column":40}},"34":{"start":{"line":50,"column":4},"end":{"line":52,"column":7}},"35":{"start":{"line":51,"column":6},"end":{"line":51,"column":48}},"36":{"start":{"line":54,"column":4},"end":{"line":56,"column":7}},"37":{"start":{"line":55,"column":6},"end":{"line":55,"column":47}},"38":{"start":{"line":58,"column":4},"end":{"line":76,"column":7}},"39":{"start":{"line":59,"column":6},"end":{"line":61,"column":7}},"40":{"start":{"line":60,"column":8},"end":{"line":60,"column":76}},"41":{"start":{"line":63,"column":6},"end":{"line":75,"column":7}},"42":{"start":{"line":64,"column":8},"end":{"line":64,"column":77}},"43":{"start":{"line":66,"column":29},"end":{"line":66,"column":68}},"44":{"start":{"line":67,"column":22},"end":{"line":67,"column":24}},"45":{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},"46":{"start":{"line":69,"column":21},"end":{"line":69,"column":22}},"47":{"start":{"line":70,"column":10},"end":{"line":70,"column":77}},"48":{"start":{"line":74,"column":8},"end":{"line":74,"column":44}},"49":{"start":{"line":78,"column":4},"end":{"line":90,"column":7}},"50":{"start":{"line":79,"column":6},"end":{"line":89,"column":7}},"51":{"start":{"line":80,"column":8},"end":{"line":80,"column":64}},"52":{"start":{"line":82,"column":18},"end":{"line":82,"column":19}},"53":{"start":{"line":84,"column":8},"end":{"line":86,"column":9}},"54":{"start":{"line":84,"column":21},"end":{"line":84,"column":22}},"55":{"start":{"line":85,"column":10},"end":{"line":85,"column":35}},"56":{"start":{"line":88,"column":8},"end":{"line":88,"column":19}},"57":{"start":{"line":92,"column":4},"end":{"line":94,"column":7}},"58":{"start":{"line":93,"column":6},"end":{"line":93,"column":46}},"59":{"start":{"line":96,"column":4},"end":{"line":98,"column":7}},"60":{"start":{"line":97,"column":6},"end":{"line":97,"column":55}},"61":{"start":{"line":100,"column":4},"end":{"line":102,"column":7}},"62":{"start":{"line":101,"column":6},"end":{"line":101,"column":101}},"63":{"start":{"line":104,"column":4},"end":{"line":106,"column":7}},"64":{"start":{"line":105,"column":6},"end":{"line":105,"column":84}},"65":{"start":{"line":108,"column":4},"end":{"line":117,"column":7}},"66":{"start":{"line":110,"column":6},"end":{"line":116,"column":7}},"67":{"start":{"line":111,"column":8},"end":{"line":111,"column":81}},"68":{"start":{"line":113,"column":18},"end":{"line":113,"column":58}},"69":{"start":{"line":114,"column":8},"end":{"line":114,"column":28}},"70":{"start":{"line":115,"column":8},"end":{"line":115,"column":28}},"71":{"start":{"line":119,"column":4},"end":{"line":126,"column":7}},"72":{"start":{"line":121,"column":6},"end":{"line":125,"column":7}},"73":{"start":{"line":122,"column":8},"end":{"line":122,"column":81}},"74":{"start":{"line":124,"column":8},"end":{"line":124,"column":72}},"75":{"start":{"line":128,"column":4},"end":{"line":130,"column":7}},"76":{"start":{"line":129,"column":6},"end":{"line":129,"column":102}},"77":{"start":{"line":132,"column":4},"end":{"line":134,"column":7}},"78":{"start":{"line":133,"column":6},"end":{"line":133,"column":75}},"79":{"start":{"line":136,"column":4},"end":{"line":136,"column":105}},"80":{"start":{"line":137,"column":4},"end":{"line":137,"column":42}},"81":{"start":{"line":138,"column":4},"end":{"line":138,"column":31}},"82":{"start":{"line":139,"column":4},"end":{"line":139,"column":62}},"83":{"start":{"line":141,"column":4},"end":{"line":143,"column":5}},"84":{"start":{"line":142,"column":6},"end":{"line":142,"column":29}},"85":{"start":{"line":145,"column":4},"end":{"line":145,"column":68}},"86":{"start":{"line":155,"column":2},"end":{"line":165,"column":6}},"87":{"start":{"line":163,"column":6},"end":{"line":163,"column":26}},"88":{"start":{"line":167,"column":2},"end":{"line":167,"column":16}},"89":{"start":{"line":170,"column":0},"end":{"line":174,"column":3}},"90":{"start":{"line":171,"column":2},"end":{"line":173,"column":5}},"91":{"start":{"line":172,"column":4},"end":{"line":172,"column":30}},"92":{"start":{"line":176,"column":0},"end":{"line":180,"column":3}},"93":{"start":{"line":177,"column":2},"end":{"line":179,"column":5}},"94":{"start":{"line":178,"column":4},"end":{"line":178,"column":30}},"95":{"start":{"line":182,"column":0},"end":{"line":192,"column":3}},"96":{"start":{"line":183,"column":15},"end":{"line":183,"column":51}},"97":{"start":{"line":185,"column":2},"end":{"line":189,"column":3}},"98":{"start":{"line":185,"column":15},"end":{"line":185,"column":16}},"99":{"start":{"line":186,"column":4},"end":{"line":188,"column":5}},"100":{"start":{"line":186,"column":17},"end":{"line":186,"column":18}},"101":{"start":{"line":187,"column":6},"end":{"line":187,"column":55}},"102":{"start":{"line":191,"column":2},"end":{"line":191,"column":16}},"103":{"start":{"line":194,"column":0},"end":{"line":202,"column":3}},"104":{"start":{"line":195,"column":17},"end":{"line":195,"column":52}},"105":{"start":{"line":197,"column":2},"end":{"line":199,"column":3}},"106":{"start":{"line":197,"column":15},"end":{"line":197,"column":16}},"107":{"start":{"line":198,"column":4},"end":{"line":198,"column":23}},"108":{"start":{"line":201,"column":2},"end":{"line":201,"column":18}},"109":{"start":{"line":204,"column":0},"end":{"line":206,"column":3}},"110":{"start":{"line":205,"column":2},"end":{"line":205,"column":56}},"111":{"start":{"line":208,"column":0},"end":{"line":214,"column":3}},"112":{"start":{"line":209,"column":2},"end":{"line":213,"column":5}},"113":{"start":{"line":210,"column":4},"end":{"line":210,"column":21}},"114":{"start":{"line":212,"column":4},"end":{"line":212,"column":21}},"115":{"start":{"line":216,"column":0},"end":{"line":230,"column":3}},"116":{"start":{"line":218,"column":2},"end":{"line":218,"column":58}},"117":{"start":{"line":219,"column":17},"end":{"line":219,"column":21}},"118":{"start":{"line":220,"column":10},"end":{"line":220,"column":23}},"119":{"start":{"line":222,"column":2},"end":{"line":227,"column":3}},"120":{"start":{"line":222,"column":15},"end":{"line":222,"column":16}},"121":{"start":{"line":223,"column":4},"end":{"line":226,"column":5}},"122":{"start":{"line":224,"column":6},"end":{"line":224,"column":23}},"123":{"start":{"line":225,"column":6},"end":{"line":225,"column":12}},"124":{"start":{"line":229,"column":2},"end":{"line":229,"column":18}},"125":{"start":{"line":232,"column":0},"end":{"line":243,"column":3}},"126":{"start":{"line":234,"column":2},"end":{"line":234,"column":42}},"127":{"start":{"line":236,"column":14},"end":{"line":236,"column":15}},"128":{"start":{"line":238,"column":2},"end":{"line":240,"column":3}},"129":{"start":{"line":238,"column":15},"end":{"line":238,"column":16}},"130":{"start":{"line":239,"column":4},"end":{"line":239,"column":26}},"131":{"start":{"line":242,"column":2},"end":{"line":242,"column":15}},"132":{"start":{"line":245,"column":0},"end":{"line":255,"column":3}},"133":{"start":{"line":246,"column":2},"end":{"line":254,"column":5}},"134":{"start":{"line":247,"column":4},"end":{"line":249,"column":7}},"135":{"start":{"line":248,"column":6},"end":{"line":248,"column":23}},"136":{"start":{"line":251,"column":4},"end":{"line":253,"column":7}},"137":{"start":{"line":252,"column":6},"end":{"line":252,"column":23}},"138":{"start":{"line":257,"column":0},"end":{"line":263,"column":3}},"139":{"start":{"line":258,"column":2},"end":{"line":262,"column":5}},"140":{"start":{"line":259,"column":4},"end":{"line":259,"column":26}},"141":{"start":{"line":261,"column":4},"end":{"line":261,"column":26}},"142":{"start":{"line":265,"column":0},"end":{"line":284,"column":3}},"143":{"start":{"line":267,"column":2},"end":{"line":283,"column":3}},"144":{"start":{"line":268,"column":4},"end":{"line":268,"column":72}},"145":{"start":{"line":270,"column":25},"end":{"line":270,"column":65}},"146":{"start":{"line":271,"column":18},"end":{"line":271,"column":20}},"147":{"start":{"line":273,"column":32},"end":{"line":273,"column":61}},"148":{"start":{"line":274,"column":12},"end":{"line":274,"column":35}},"149":{"start":{"line":275,"column":12},"end":{"line":275,"column":35}},"150":{"start":{"line":277,"column":4},"end":{"line":279,"column":5}},"151":{"start":{"line":277,"column":17},"end":{"line":277,"column":18}},"152":{"start":{"line":278,"column":6},"end":{"line":278,"column":80}},"153":{"start":{"line":282,"column":4},"end":{"line":282,"column":40}},"154":{"start":{"line":286,"column":0},"end":{"line":295,"column":3}},"155":{"start":{"line":287,"column":2},"end":{"line":287,"column":42}},"156":{"start":{"line":288,"column":15},"end":{"line":288,"column":17}},"157":{"start":{"line":290,"column":2},"end":{"line":292,"column":3}},"158":{"start":{"line":290,"column":15},"end":{"line":290,"column":16}},"159":{"start":{"line":291,"column":4},"end":{"line":291,"column":32}},"160":{"start":{"line":294,"column":2},"end":{"line":294,"column":16}},"161":{"start":{"line":297,"column":0},"end":{"line":315,"column":3}},"162":{"start":{"line":299,"column":2},"end":{"line":299,"column":44}},"163":{"start":{"line":300,"column":2},"end":{"line":300,"column":44}},"164":{"start":{"line":302,"column":2},"end":{"line":314,"column":3}},"165":{"start":{"line":303,"column":4},"end":{"line":303,"column":72}},"166":{"start":{"line":305,"column":20},"end":{"line":305,"column":79}},"167":{"start":{"line":307,"column":4},"end":{"line":311,"column":5}},"168":{"start":{"line":307,"column":17},"end":{"line":307,"column":18}},"169":{"start":{"line":308,"column":6},"end":{"line":310,"column":7}},"170":{"start":{"line":308,"column":19},"end":{"line":308,"column":20}},"171":{"start":{"line":309,"column":8},"end":{"line":309,"column":56}},"172":{"start":{"line":313,"column":4},"end":{"line":313,"column":21}},"173":{"start":{"line":317,"column":0},"end":{"line":335,"column":3}},"174":{"start":{"line":319,"column":2},"end":{"line":319,"column":44}},"175":{"start":{"line":320,"column":2},"end":{"line":320,"column":44}},"176":{"start":{"line":322,"column":2},"end":{"line":334,"column":3}},"177":{"start":{"line":323,"column":4},"end":{"line":323,"column":72}},"178":{"start":{"line":325,"column":20},"end":{"line":325,"column":79}},"179":{"start":{"line":327,"column":4},"end":{"line":331,"column":5}},"180":{"start":{"line":327,"column":17},"end":{"line":327,"column":18}},"181":{"start":{"line":328,"column":6},"end":{"line":330,"column":7}},"182":{"start":{"line":328,"column":19},"end":{"line":328,"column":20}},"183":{"start":{"line":329,"column":8},"end":{"line":329,"column":56}},"184":{"start":{"line":333,"column":4},"end":{"line":333,"column":21}},"185":{"start":{"line":337,"column":0},"end":{"line":347,"column":3}},"186":{"start":{"line":338,"column":18},"end":{"line":338,"column":88}},"187":{"start":{"line":340,"column":2},"end":{"line":344,"column":3}},"188":{"start":{"line":340,"column":15},"end":{"line":340,"column":16}},"189":{"start":{"line":341,"column":4},"end":{"line":343,"column":5}},"190":{"start":{"line":341,"column":17},"end":{"line":341,"column":18}},"191":{"start":{"line":342,"column":6},"end":{"line":342,"column":59}},"192":{"start":{"line":346,"column":2},"end":{"line":346,"column":19}},"193":{"start":{"line":349,"column":0},"end":{"line":358,"column":3}},"194":{"start":{"line":351,"column":2},"end":{"line":351,"column":58}},"195":{"start":{"line":353,"column":2},"end":{"line":357,"column":3}},"196":{"start":{"line":354,"column":4},"end":{"line":354,"column":77}},"197":{"start":{"line":356,"column":4},"end":{"line":356,"column":45}},"198":{"start":{"line":360,"column":0},"end":{"line":391,"column":3}},"199":{"start":{"line":362,"column":2},"end":{"line":390,"column":3}},"200":{"start":{"line":363,"column":4},"end":{"line":363,"column":77}},"201":{"start":{"line":365,"column":14},"end":{"line":365,"column":40}},"202":{"start":{"line":366,"column":12},"end":{"line":366,"column":25}},"203":{"start":{"line":367,"column":16},"end":{"line":367,"column":49}},"204":{"start":{"line":368,"column":16},"end":{"line":368,"column":49}},"205":{"start":{"line":370,"column":4},"end":{"line":384,"column":5}},"206":{"start":{"line":370,"column":17},"end":{"line":370,"column":18}},"207":{"start":{"line":371,"column":6},"end":{"line":371,"column":22}},"208":{"start":{"line":372,"column":6},"end":{"line":372,"column":30}},"209":{"start":{"line":374,"column":6},"end":{"line":377,"column":7}},"210":{"start":{"line":374,"column":19},"end":{"line":374,"column":24}},"211":{"start":{"line":375,"column":8},"end":{"line":375,"column":46}},"212":{"start":{"line":376,"column":8},"end":{"line":376,"column":32}},"213":{"start":{"line":379,"column":6},"end":{"line":383,"column":7}},"214":{"start":{"line":379,"column":20},"end":{"line":379,"column":25}},"215":{"start":{"line":380,"column":8},"end":{"line":382,"column":9}},"216":{"start":{"line":380,"column":21},"end":{"line":380,"column":26}},"217":{"start":{"line":381,"column":10},"end":{"line":381,"column":51}},"218":{"start":{"line":386,"column":4},"end":{"line":389,"column":6}},"219":{"start":{"line":393,"column":0},"end":{"line":427,"column":3}},"220":{"start":{"line":395,"column":2},"end":{"line":426,"column":3}},"221":{"start":{"line":396,"column":4},"end":{"line":396,"column":77}},"222":{"start":{"line":398,"column":12},"end":{"line":398,"column":28}},"223":{"start":{"line":400,"column":12},"end":{"line":400,"column":28}},"224":{"start":{"line":402,"column":4},"end":{"line":410,"column":5}},"225":{"start":{"line":402,"column":17},"end":{"line":402,"column":18}},"226":{"start":{"line":403,"column":16},"end":{"line":403,"column":17}},"227":{"start":{"line":405,"column":6},"end":{"line":407,"column":7}},"228":{"start":{"line":405,"column":19},"end":{"line":405,"column":20}},"229":{"start":{"line":406,"column":8},"end":{"line":406,"column":34}},"230":{"start":{"line":409,"column":6},"end":{"line":409,"column":48}},"231":{"start":{"line":413,"column":12},"end":{"line":413,"column":28}},"232":{"start":{"line":415,"column":4},"end":{"line":423,"column":5}},"233":{"start":{"line":415,"column":19},"end":{"line":415,"column":24}},"234":{"start":{"line":416,"column":17},"end":{"line":416,"column":18}},"235":{"start":{"line":418,"column":6},"end":{"line":420,"column":7}},"236":{"start":{"line":418,"column":20},"end":{"line":418,"column":27}},"237":{"start":{"line":419,"column":8},"end":{"line":419,"column":39}},"238":{"start":{"line":422,"column":6},"end":{"line":422,"column":53}},"239":{"start":{"line":425,"column":4},"end":{"line":425,"column":13}},"240":{"start":{"line":429,"column":0},"end":{"line":449,"column":3}},"241":{"start":{"line":431,"column":2},"end":{"line":431,"column":62}},"242":{"start":{"line":432,"column":2},"end":{"line":432,"column":62}},"243":{"start":{"line":434,"column":2},"end":{"line":448,"column":3}},"244":{"start":{"line":435,"column":4},"end":{"line":435,"column":52}},"245":{"start":{"line":437,"column":20},"end":{"line":437,"column":79}},"246":{"start":{"line":439,"column":4},"end":{"line":445,"column":5}},"247":{"start":{"line":439,"column":17},"end":{"line":439,"column":18}},"248":{"start":{"line":440,"column":6},"end":{"line":444,"column":7}},"249":{"start":{"line":440,"column":19},"end":{"line":440,"column":20}},"250":{"start":{"line":441,"column":8},"end":{"line":443,"column":9}},"251":{"start":{"line":441,"column":21},"end":{"line":441,"column":22}},"252":{"start":{"line":442,"column":10},"end":{"line":442,"column":59}},"253":{"start":{"line":447,"column":4},"end":{"line":447,"column":21}},"254":{"start":{"line":451,"column":0},"end":{"line":492,"column":3}},"255":{"start":{"line":452,"column":17},"end":{"line":452,"column":86}},"256":{"start":{"line":454,"column":2},"end":{"line":454,"column":32}},"257":{"start":{"line":455,"column":2},"end":{"line":455,"column":32}},"258":{"start":{"line":457,"column":2},"end":{"line":459,"column":3}},"259":{"start":{"line":458,"column":4},"end":{"line":458,"column":34}},"260":{"start":{"line":462,"column":2},"end":{"line":464,"column":3}},"261":{"start":{"line":463,"column":4},"end":{"line":463,"column":59}},"262":{"start":{"line":466,"column":23},"end":{"line":468,"column":3}},"263":{"start":{"line":467,"column":4},"end":{"line":467,"column":48}},"264":{"start":{"line":470,"column":10},"end":{"line":470,"column":18}},"265":{"start":{"line":471,"column":10},"end":{"line":471,"column":27}},"266":{"start":{"line":472,"column":14},"end":{"line":472,"column":47}},"267":{"start":{"line":473,"column":14},"end":{"line":473,"column":47}},"268":{"start":{"line":475,"column":2},"end":{"line":480,"column":3}},"269":{"start":{"line":475,"column":15},"end":{"line":475,"column":16}},"270":{"start":{"line":476,"column":4},"end":{"line":479,"column":5}},"271":{"start":{"line":476,"column":17},"end":{"line":476,"column":18}},"272":{"start":{"line":477,"column":6},"end":{"line":477,"column":28}},"273":{"start":{"line":478,"column":6},"end":{"line":478,"column":28}},"274":{"start":{"line":482,"column":14},"end":{"line":482,"column":62}},"275":{"start":{"line":483,"column":10},"end":{"line":483,"column":43}},"276":{"start":{"line":485,"column":2},"end":{"line":489,"column":3}},"277":{"start":{"line":485,"column":17},"end":{"line":485,"column":18}},"278":{"start":{"line":486,"column":4},"end":{"line":488,"column":5}},"279":{"start":{"line":486,"column":18},"end":{"line":486,"column":19}},"280":{"start":{"line":487,"column":6},"end":{"line":487,"column":34}},"281":{"start":{"line":491,"column":2},"end":{"line":491,"column":11}},"282":{"start":{"line":494,"column":0},"end":{"line":540,"column":3}},"283":{"start":{"line":495,"column":17},"end":{"line":495,"column":86}},"284":{"start":{"line":496,"column":10},"end":{"line":496,"column":18}},"285":{"start":{"line":498,"column":2},"end":{"line":539,"column":3}},"286":{"start":{"line":499,"column":4},"end":{"line":499,"column":42}},"287":{"start":{"line":501,"column":18},"end":{"line":501,"column":35}},"288":{"start":{"line":503,"column":14},"end":{"line":503,"column":68}},"289":{"start":{"line":504,"column":14},"end":{"line":504,"column":68}},"290":{"start":{"line":505,"column":14},"end":{"line":505,"column":80}},"291":{"start":{"line":506,"column":14},"end":{"line":506,"column":68}},"292":{"start":{"line":507,"column":14},"end":{"line":507,"column":68}},"293":{"start":{"line":508,"column":14},"end":{"line":508,"column":68}},"294":{"start":{"line":509,"column":14},"end":{"line":509,"column":68}},"295":{"start":{"line":510,"column":14},"end":{"line":510,"column":68}},"296":{"start":{"line":512,"column":13},"end":{"line":512,"column":107}},"297":{"start":{"line":513,"column":13},"end":{"line":513,"column":82}},"298":{"start":{"line":514,"column":13},"end":{"line":514,"column":87}},"299":{"start":{"line":515,"column":13},"end":{"line":515,"column":87}},"300":{"start":{"line":516,"column":13},"end":{"line":516,"column":82}},"301":{"start":{"line":517,"column":13},"end":{"line":517,"column":112}},"302":{"start":{"line":518,"column":13},"end":{"line":518,"column":112}},"303":{"start":{"line":519,"column":14},"end":{"line":519,"column":93}},"304":{"start":{"line":521,"column":14},"end":{"line":521,"column":40}},"305":{"start":{"line":523,"column":14},"end":{"line":523,"column":40}},"306":{"start":{"line":525,"column":14},"end":{"line":525,"column":93}},"307":{"start":{"line":527,"column":12},"end":{"line":527,"column":45}},"308":{"start":{"line":529,"column":4},"end":{"line":536,"column":5}},"309":{"start":{"line":529,"column":17},"end":{"line":529,"column":18}},"310":{"start":{"line":530,"column":6},"end":{"line":535,"column":7}},"311":{"start":{"line":530,"column":19},"end":{"line":530,"column":20}},"312":{"start":{"line":531,"column":8},"end":{"line":531,"column":28}},"313":{"start":{"line":532,"column":8},"end":{"line":532,"column":38}},"314":{"start":{"line":533,"column":8},"end":{"line":533,"column":38}},"315":{"start":{"line":534,"column":8},"end":{"line":534,"column":48}},"316":{"start":{"line":538,"column":4},"end":{"line":538,"column":13}},"317":{"start":{"line":542,"column":15},"end":{"line":542,"column":21}},"318":{"start":{"line":543,"column":0},"end":{"line":543,"column":30}}},"fnMap":{"0":{"name":"_classCallCheck","decl":{"start":{"line":8,"column":9},"end":{"line":8,"column":24}},"loc":{"start":{"line":8,"column":48},"end":{"line":8,"column":153}},"line":8},"1":{"name":"_defineProperties","decl":{"start":{"line":10,"column":9},"end":{"line":10,"column":26}},"loc":{"start":{"line":10,"column":42},"end":{"line":10,"column":317}},"line":10},"2":{"name":"_createClass","decl":{"start":{"line":12,"column":9},"end":{"line":12,"column":21}},"loc":{"start":{"line":12,"column":60},"end":{"line":12,"column":215}},"line":12},"3":{"name":"_defineProperty","decl":{"start":{"line":14,"column":9},"end":{"line":14,"column":24}},"loc":{"start":{"line":14,"column":42},"end":{"line":14,"column":209}},"line":14},"4":{"name":"(anonymous_4)","decl":{"start":{"line":16,"column":26},"end":{"line":16,"column":27}},"loc":{"start":{"line":16,"column":38},"end":{"line":168,"column":1}},"line":16},"5":{"name":"Matrix","decl":{"start":{"line":25,"column":11},"end":{"line":25,"column":17}},"loc":{"start":{"line":25,"column":27},"end":{"line":146,"column":3}},"line":25},"6":{"name":"(anonymous_6)","decl":{"start":{"line":34,"column":45},"end":{"line":34,"column":46}},"loc":{"start":{"line":34,"column":63},"end":{"line":36,"column":5}},"line":34},"7":{"name":"(anonymous_7)","decl":{"start":{"line":38,"column":37},"end":{"line":38,"column":38}},"loc":{"start":{"line":38,"column":49},"end":{"line":40,"column":5}},"line":38},"8":{"name":"(anonymous_8)","decl":{"start":{"line":42,"column":44},"end":{"line":42,"column":45}},"loc":{"start":{"line":42,"column":56},"end":{"line":44,"column":5}},"line":42},"9":{"name":"(anonymous_9)","decl":{"start":{"line":46,"column":38},"end":{"line":46,"column":39}},"loc":{"start":{"line":46,"column":50},"end":{"line":48,"column":5}},"line":46},"10":{"name":"(anonymous_10)","decl":{"start":{"line":50,"column":42},"end":{"line":50,"column":43}},"loc":{"start":{"line":50,"column":54},"end":{"line":52,"column":5}},"line":50},"11":{"name":"(anonymous_11)","decl":{"start":{"line":54,"column":41},"end":{"line":54,"column":42}},"loc":{"start":{"line":54,"column":53},"end":{"line":56,"column":5}},"line":54},"12":{"name":"(anonymous_12)","decl":{"start":{"line":58,"column":40},"end":{"line":58,"column":41}},"loc":{"start":{"line":58,"column":52},"end":{"line":76,"column":5}},"line":58},"13":{"name":"(anonymous_13)","decl":{"start":{"line":78,"column":44},"end":{"line":78,"column":45}},"loc":{"start":{"line":78,"column":56},"end":{"line":90,"column":5}},"line":78},"14":{"name":"(anonymous_14)","decl":{"start":{"line":92,"column":36},"end":{"line":92,"column":37}},"loc":{"start":{"line":92,"column":51},"end":{"line":94,"column":5}},"line":92},"15":{"name":"(anonymous_15)","decl":{"start":{"line":96,"column":33},"end":{"line":96,"column":34}},"loc":{"start":{"line":96,"column":51},"end":{"line":98,"column":5}},"line":96},"16":{"name":"(anonymous_16)","decl":{"start":{"line":100,"column":33},"end":{"line":100,"column":34}},"loc":{"start":{"line":100,"column":51},"end":{"line":102,"column":5}},"line":100},"17":{"name":"(anonymous_17)","decl":{"start":{"line":104,"column":42},"end":{"line":104,"column":43}},"loc":{"start":{"line":104,"column":88},"end":{"line":106,"column":5}},"line":104},"18":{"name":"(anonymous_18)","decl":{"start":{"line":108,"column":45},"end":{"line":108,"column":46}},"loc":{"start":{"line":108,"column":57},"end":{"line":117,"column":5}},"line":108},"19":{"name":"(anonymous_19)","decl":{"start":{"line":119,"column":42},"end":{"line":119,"column":43}},"loc":{"start":{"line":119,"column":63},"end":{"line":126,"column":5}},"line":119},"20":{"name":"(anonymous_20)","decl":{"start":{"line":128,"column":47},"end":{"line":128,"column":48}},"loc":{"start":{"line":128,"column":65},"end":{"line":130,"column":5}},"line":128},"21":{"name":"(anonymous_21)","decl":{"start":{"line":132,"column":52},"end":{"line":132,"column":53}},"loc":{"start":{"line":132,"column":80},"end":{"line":134,"column":5}},"line":132},"22":{"name":"get","decl":{"start":{"line":162,"column":18},"end":{"line":162,"column":21}},"loc":{"start":{"line":162,"column":24},"end":{"line":164,"column":5}},"line":162},"23":{"name":"(anonymous_23)","decl":{"start":{"line":170,"column":45},"end":{"line":170,"column":46}},"loc":{"start":{"line":170,"column":65},"end":{"line":174,"column":1}},"line":170},"24":{"name":"(anonymous_24)","decl":{"start":{"line":171,"column":31},"end":{"line":171,"column":32}},"loc":{"start":{"line":171,"column":43},"end":{"line":173,"column":3}},"line":171},"25":{"name":"(anonymous_25)","decl":{"start":{"line":176,"column":51},"end":{"line":176,"column":52}},"loc":{"start":{"line":176,"column":66},"end":{"line":180,"column":1}},"line":176},"26":{"name":"(anonymous_26)","decl":{"start":{"line":177,"column":31},"end":{"line":177,"column":32}},"loc":{"start":{"line":177,"column":43},"end":{"line":179,"column":3}},"line":177},"27":{"name":"(anonymous_27)","decl":{"start":{"line":182,"column":46},"end":{"line":182,"column":47}},"loc":{"start":{"line":182,"column":78},"end":{"line":192,"column":1}},"line":182},"28":{"name":"(anonymous_28)","decl":{"start":{"line":194,"column":48},"end":{"line":194,"column":49}},"loc":{"start":{"line":194,"column":63},"end":{"line":202,"column":1}},"line":194},"29":{"name":"(anonymous_29)","decl":{"start":{"line":204,"column":43},"end":{"line":204,"column":44}},"loc":{"start":{"line":204,"column":61},"end":{"line":206,"column":1}},"line":204},"30":{"name":"(anonymous_30)","decl":{"start":{"line":208,"column":39},"end":{"line":208,"column":40}},"loc":{"start":{"line":208,"column":57},"end":{"line":214,"column":1}},"line":208},"31":{"name":"(anonymous_31)","decl":{"start":{"line":209,"column":44},"end":{"line":209,"column":45}},"loc":{"start":{"line":209,"column":57},"end":{"line":211,"column":3}},"line":209},"32":{"name":"(anonymous_32)","decl":{"start":{"line":211,"column":26},"end":{"line":211,"column":27}},"loc":{"start":{"line":211,"column":39},"end":{"line":213,"column":3}},"line":211},"33":{"name":"(anonymous_33)","decl":{"start":{"line":216,"column":42},"end":{"line":216,"column":43}},"loc":{"start":{"line":216,"column":60},"end":{"line":230,"column":1}},"line":216},"34":{"name":"(anonymous_34)","decl":{"start":{"line":232,"column":33},"end":{"line":232,"column":34}},"loc":{"start":{"line":232,"column":51},"end":{"line":243,"column":1}},"line":232},"35":{"name":"(anonymous_35)","decl":{"start":{"line":245,"column":40},"end":{"line":245,"column":41}},"loc":{"start":{"line":245,"column":58},"end":{"line":255,"column":1}},"line":245},"36":{"name":"(anonymous_36)","decl":{"start":{"line":246,"column":47},"end":{"line":246,"column":48}},"loc":{"start":{"line":246,"column":66},"end":{"line":250,"column":3}},"line":246},"37":{"name":"(anonymous_37)","decl":{"start":{"line":247,"column":22},"end":{"line":247,"column":23}},"loc":{"start":{"line":247,"column":37},"end":{"line":249,"column":5}},"line":247},"38":{"name":"(anonymous_38)","decl":{"start":{"line":250,"column":28},"end":{"line":250,"column":29}},"loc":{"start":{"line":250,"column":47},"end":{"line":254,"column":3}},"line":250},"39":{"name":"(anonymous_39)","decl":{"start":{"line":251,"column":22},"end":{"line":251,"column":23}},"loc":{"start":{"line":251,"column":37},"end":{"line":253,"column":5}},"line":251},"40":{"name":"(anonymous_40)","decl":{"start":{"line":257,"column":39},"end":{"line":257,"column":40}},"loc":{"start":{"line":257,"column":57},"end":{"line":263,"column":1}},"line":257},"41":{"name":"(anonymous_41)","decl":{"start":{"line":258,"column":44},"end":{"line":258,"column":45}},"loc":{"start":{"line":258,"column":57},"end":{"line":260,"column":3}},"line":258},"42":{"name":"(anonymous_42)","decl":{"start":{"line":260,"column":25},"end":{"line":260,"column":26}},"loc":{"start":{"line":260,"column":38},"end":{"line":262,"column":3}},"line":260},"43":{"name":"(anonymous_43)","decl":{"start":{"line":265,"column":38},"end":{"line":265,"column":39}},"loc":{"start":{"line":265,"column":56},"end":{"line":284,"column":1}},"line":265},"44":{"name":"(anonymous_44)","decl":{"start":{"line":286,"column":34},"end":{"line":286,"column":35}},"loc":{"start":{"line":286,"column":57},"end":{"line":295,"column":1}},"line":286},"45":{"name":"(anonymous_45)","decl":{"start":{"line":297,"column":39},"end":{"line":297,"column":40}},"loc":{"start":{"line":297,"column":67},"end":{"line":315,"column":1}},"line":297},"46":{"name":"(anonymous_46)","decl":{"start":{"line":317,"column":44},"end":{"line":317,"column":45}},"loc":{"start":{"line":317,"column":72},"end":{"line":335,"column":1}},"line":317},"47":{"name":"(anonymous_47)","decl":{"start":{"line":337,"column":40},"end":{"line":337,"column":41}},"loc":{"start":{"line":337,"column":94},"end":{"line":347,"column":1}},"line":337},"48":{"name":"(anonymous_48)","decl":{"start":{"line":349,"column":42},"end":{"line":349,"column":43}},"loc":{"start":{"line":349,"column":60},"end":{"line":358,"column":1}},"line":349},"49":{"name":"(anonymous_49)","decl":{"start":{"line":360,"column":46},"end":{"line":360,"column":47}},"loc":{"start":{"line":360,"column":64},"end":{"line":391,"column":1}},"line":360},"50":{"name":"(anonymous_50)","decl":{"start":{"line":393,"column":40},"end":{"line":393,"column":41}},"loc":{"start":{"line":393,"column":75},"end":{"line":427,"column":1}},"line":393},"51":{"name":"(anonymous_51)","decl":{"start":{"line":429,"column":45},"end":{"line":429,"column":46}},"loc":{"start":{"line":429,"column":73},"end":{"line":449,"column":1}},"line":429},"52":{"name":"(anonymous_52)","decl":{"start":{"line":451,"column":50},"end":{"line":451,"column":51}},"loc":{"start":{"line":451,"column":66},"end":{"line":492,"column":1}},"line":451},"53":{"name":"nextPowerOfTow","decl":{"start":{"line":466,"column":32},"end":{"line":466,"column":46}},"loc":{"start":{"line":466,"column":50},"end":{"line":468,"column":3}},"line":466},"54":{"name":"(anonymous_54)","decl":{"start":{"line":494,"column":45},"end":{"line":494,"column":46}},"loc":{"start":{"line":494,"column":61},"end":{"line":540,"column":1}},"line":494}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":50},"end":{"line":8,"column":151}},"type":"if","locations":[{"start":{"line":8,"column":50},"end":{"line":8,"column":151}},{"start":{"line":8,"column":50},"end":{"line":8,"column":151}}],"line":8},"1":{"loc":{"start":{"line":10,"column":136},"end":{"line":10,"column":166}},"type":"binary-expr","locations":[{"start":{"line":10,"column":136},"end":{"line":10,"column":157}},{"start":{"line":10,"column":161},"end":{"line":10,"column":166}}],"line":10},"2":{"loc":{"start":{"line":10,"column":200},"end":{"line":10,"column":254}},"type":"if","locations":[{"start":{"line":10,"column":200},"end":{"line":10,"column":254}},{"start":{"line":10,"column":200},"end":{"line":10,"column":254}}],"line":10},"3":{"loc":{"start":{"line":12,"column":62},"end":{"line":12,"column":131}},"type":"if","locations":[{"start":{"line":12,"column":62},"end":{"line":12,"column":131}},{"start":{"line":12,"column":62},"end":{"line":12,"column":131}}],"line":12},"4":{"loc":{"start":{"line":12,"column":132},"end":{"line":12,"column":193}},"type":"if","locations":[{"start":{"line":12,"column":132},"end":{"line":12,"column":193}},{"start":{"line":12,"column":132},"end":{"line":12,"column":193}}],"line":12},"5":{"loc":{"start":{"line":14,"column":44},"end":{"line":14,"column":195}},"type":"if","locations":[{"start":{"line":14,"column":44},"end":{"line":14,"column":195}},{"start":{"line":14,"column":44},"end":{"line":14,"column":195}}],"line":14},"6":{"loc":{"start":{"line":59,"column":6},"end":{"line":61,"column":7}},"type":"if","locations":[{"start":{"line":59,"column":6},"end":{"line":61,"column":7}},{"start":{"line":59,"column":6},"end":{"line":61,"column":7}}],"line":59},"7":{"loc":{"start":{"line":63,"column":6},"end":{"line":75,"column":7}},"type":"if","locations":[{"start":{"line":63,"column":6},"end":{"line":75,"column":7}},{"start":{"line":63,"column":6},"end":{"line":75,"column":7}}],"line":63},"8":{"loc":{"start":{"line":79,"column":6},"end":{"line":89,"column":7}},"type":"if","locations":[{"start":{"line":79,"column":6},"end":{"line":89,"column":7}},{"start":{"line":79,"column":6},"end":{"line":89,"column":7}}],"line":79},"9":{"loc":{"start":{"line":101,"column":52},"end":{"line":101,"column":99}},"type":"cond-expr","locations":[{"start":{"line":101,"column":77},"end":{"line":101,"column":90}},{"start":{"line":101,"column":93},"end":{"line":101,"column":99}}],"line":101},"10":{"loc":{"start":{"line":110,"column":6},"end":{"line":116,"column":7}},"type":"if","locations":[{"start":{"line":110,"column":6},"end":{"line":116,"column":7}},{"start":{"line":110,"column":6},"end":{"line":116,"column":7}}],"line":110},"11":{"loc":{"start":{"line":121,"column":6},"end":{"line":125,"column":7}},"type":"if","locations":[{"start":{"line":121,"column":6},"end":{"line":125,"column":7}},{"start":{"line":121,"column":6},"end":{"line":125,"column":7}}],"line":121},"12":{"loc":{"start":{"line":129,"column":53},"end":{"line":129,"column":100}},"type":"cond-expr","locations":[{"start":{"line":129,"column":78},"end":{"line":129,"column":91}},{"start":{"line":129,"column":94},"end":{"line":129,"column":100}}],"line":129},"13":{"loc":{"start":{"line":136,"column":19},"end":{"line":136,"column":104}},"type":"cond-expr","locations":[{"start":{"line":136,"column":73},"end":{"line":136,"column":80}},{"start":{"line":136,"column":83},"end":{"line":136,"column":104}}],"line":136},"14":{"loc":{"start":{"line":136,"column":19},"end":{"line":136,"column":70}},"type":"binary-expr","locations":[{"start":{"line":136,"column":19},"end":{"line":136,"column":41}},{"start":{"line":136,"column":45},"end":{"line":136,"column":70}}],"line":136},"15":{"loc":{"start":{"line":139,"column":16},"end":{"line":139,"column":61}},"type":"cond-expr","locations":[{"start":{"line":139,"column":32},"end":{"line":139,"column":41}},{"start":{"line":139,"column":44},"end":{"line":139,"column":61}}],"line":139},"16":{"loc":{"start":{"line":141,"column":4},"end":{"line":143,"column":5}},"type":"if","locations":[{"start":{"line":141,"column":4},"end":{"line":143,"column":5}},{"start":{"line":141,"column":4},"end":{"line":143,"column":5}}],"line":141},"17":{"loc":{"start":{"line":145,"column":23},"end":{"line":145,"column":67}},"type":"cond-expr","locations":[{"start":{"line":145,"column":39},"end":{"line":145,"column":60}},{"start":{"line":145,"column":63},"end":{"line":145,"column":67}}],"line":145},"18":{"loc":{"start":{"line":205,"column":9},"end":{"line":205,"column":55}},"type":"cond-expr","locations":[{"start":{"line":205,"column":33},"end":{"line":205,"column":39}},{"start":{"line":205,"column":42},"end":{"line":205,"column":55}}],"line":205},"19":{"loc":{"start":{"line":209,"column":9},"end":{"line":213,"column":4}},"type":"cond-expr","locations":[{"start":{"line":209,"column":33},"end":{"line":211,"column":4}},{"start":{"line":211,"column":7},"end":{"line":213,"column":4}}],"line":209},"20":{"loc":{"start":{"line":218,"column":11},"end":{"line":218,"column":57}},"type":"cond-expr","locations":[{"start":{"line":218,"column":35},"end":{"line":218,"column":41}},{"start":{"line":218,"column":44},"end":{"line":218,"column":57}}],"line":218},"21":{"loc":{"start":{"line":223,"column":4},"end":{"line":226,"column":5}},"type":"if","locations":[{"start":{"line":223,"column":4},"end":{"line":226,"column":5}},{"start":{"line":223,"column":4},"end":{"line":226,"column":5}}],"line":223},"22":{"loc":{"start":{"line":246,"column":9},"end":{"line":254,"column":4}},"type":"cond-expr","locations":[{"start":{"line":246,"column":33},"end":{"line":250,"column":4}},{"start":{"line":250,"column":7},"end":{"line":254,"column":4}}],"line":246},"23":{"loc":{"start":{"line":258,"column":9},"end":{"line":262,"column":4}},"type":"cond-expr","locations":[{"start":{"line":258,"column":33},"end":{"line":260,"column":4}},{"start":{"line":260,"column":7},"end":{"line":262,"column":4}}],"line":258},"24":{"loc":{"start":{"line":267,"column":2},"end":{"line":283,"column":3}},"type":"if","locations":[{"start":{"line":267,"column":2},"end":{"line":283,"column":3}},{"start":{"line":267,"column":2},"end":{"line":283,"column":3}}],"line":267},"25":{"loc":{"start":{"line":302,"column":2},"end":{"line":314,"column":3}},"type":"if","locations":[{"start":{"line":302,"column":2},"end":{"line":314,"column":3}},{"start":{"line":302,"column":2},"end":{"line":314,"column":3}}],"line":302},"26":{"loc":{"start":{"line":302,"column":6},"end":{"line":302,"column":82}},"type":"binary-expr","locations":[{"start":{"line":302,"column":6},"end":{"line":302,"column":39}},{"start":{"line":302,"column":43},"end":{"line":302,"column":82}}],"line":302},"27":{"loc":{"start":{"line":322,"column":2},"end":{"line":334,"column":3}},"type":"if","locations":[{"start":{"line":322,"column":2},"end":{"line":334,"column":3}},{"start":{"line":322,"column":2},"end":{"line":334,"column":3}}],"line":322},"28":{"loc":{"start":{"line":322,"column":6},"end":{"line":322,"column":82}},"type":"binary-expr","locations":[{"start":{"line":322,"column":6},"end":{"line":322,"column":39}},{"start":{"line":322,"column":43},"end":{"line":322,"column":82}}],"line":322},"29":{"loc":{"start":{"line":351,"column":11},"end":{"line":351,"column":57}},"type":"cond-expr","locations":[{"start":{"line":351,"column":35},"end":{"line":351,"column":41}},{"start":{"line":351,"column":44},"end":{"line":351,"column":57}}],"line":351},"30":{"loc":{"start":{"line":353,"column":2},"end":{"line":357,"column":3}},"type":"if","locations":[{"start":{"line":353,"column":2},"end":{"line":357,"column":3}},{"start":{"line":353,"column":2},"end":{"line":357,"column":3}}],"line":353},"31":{"loc":{"start":{"line":362,"column":2},"end":{"line":390,"column":3}},"type":"if","locations":[{"start":{"line":362,"column":2},"end":{"line":390,"column":3}},{"start":{"line":362,"column":2},"end":{"line":390,"column":3}}],"line":362},"32":{"loc":{"start":{"line":395,"column":2},"end":{"line":426,"column":3}},"type":"if","locations":[{"start":{"line":395,"column":2},"end":{"line":426,"column":3}},{"start":{"line":395,"column":2},"end":{"line":426,"column":3}}],"line":395},"33":{"loc":{"start":{"line":395,"column":6},"end":{"line":395,"column":68}},"type":"binary-expr","locations":[{"start":{"line":395,"column":6},"end":{"line":395,"column":35}},{"start":{"line":395,"column":39},"end":{"line":395,"column":68}}],"line":395},"34":{"loc":{"start":{"line":431,"column":12},"end":{"line":431,"column":61}},"type":"cond-expr","locations":[{"start":{"line":431,"column":37},"end":{"line":431,"column":44}},{"start":{"line":431,"column":47},"end":{"line":431,"column":61}}],"line":431},"35":{"loc":{"start":{"line":432,"column":12},"end":{"line":432,"column":61}},"type":"cond-expr","locations":[{"start":{"line":432,"column":37},"end":{"line":432,"column":44}},{"start":{"line":432,"column":47},"end":{"line":432,"column":61}}],"line":432},"36":{"loc":{"start":{"line":434,"column":2},"end":{"line":448,"column":3}},"type":"if","locations":[{"start":{"line":434,"column":2},"end":{"line":448,"column":3}},{"start":{"line":434,"column":2},"end":{"line":448,"column":3}}],"line":434},"37":{"loc":{"start":{"line":452,"column":17},"end":{"line":452,"column":86}},"type":"cond-expr","locations":[{"start":{"line":452,"column":70},"end":{"line":452,"column":82}},{"start":{"line":452,"column":85},"end":{"line":452,"column":86}}],"line":452},"38":{"loc":{"start":{"line":452,"column":17},"end":{"line":452,"column":67}},"type":"binary-expr","locations":[{"start":{"line":452,"column":17},"end":{"line":452,"column":37}},{"start":{"line":452,"column":41},"end":{"line":452,"column":67}}],"line":452},"39":{"loc":{"start":{"line":457,"column":2},"end":{"line":459,"column":3}},"type":"if","locations":[{"start":{"line":457,"column":2},"end":{"line":459,"column":3}},{"start":{"line":457,"column":2},"end":{"line":459,"column":3}}],"line":457},"40":{"loc":{"start":{"line":457,"column":8},"end":{"line":457,"column":44}},"type":"binary-expr","locations":[{"start":{"line":457,"column":8},"end":{"line":457,"column":24}},{"start":{"line":457,"column":28},"end":{"line":457,"column":44}}],"line":457},"41":{"loc":{"start":{"line":462,"column":2},"end":{"line":464,"column":3}},"type":"if","locations":[{"start":{"line":462,"column":2},"end":{"line":464,"column":3}},{"start":{"line":462,"column":2},"end":{"line":464,"column":3}}],"line":462},"42":{"loc":{"start":{"line":462,"column":8},"end":{"line":462,"column":88}},"type":"binary-expr","locations":[{"start":{"line":462,"column":8},"end":{"line":462,"column":32}},{"start":{"line":462,"column":36},"end":{"line":462,"column":60}},{"start":{"line":462,"column":64},"end":{"line":462,"column":88}}],"line":462},"43":{"loc":{"start":{"line":495,"column":17},"end":{"line":495,"column":86}},"type":"cond-expr","locations":[{"start":{"line":495,"column":70},"end":{"line":495,"column":82}},{"start":{"line":495,"column":85},"end":{"line":495,"column":86}}],"line":495},"44":{"loc":{"start":{"line":495,"column":17},"end":{"line":495,"column":67}},"type":"binary-expr","locations":[{"start":{"line":495,"column":17},"end":{"line":495,"column":37}},{"start":{"line":495,"column":41},"end":{"line":495,"column":67}}],"line":495},"45":{"loc":{"start":{"line":498,"column":2},"end":{"line":539,"column":3}},"type":"if","locations":[{"start":{"line":498,"column":2},"end":{"line":539,"column":3}},{"start":{"line":498,"column":2},"end":{"line":539,"column":3}}],"line":498}},"s":{"0":1,"1":1,"2":28,"3":0,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":1,"12":1,"13":1,"14":1,"15":0,"16":1,"17":525,"18":0,"19":525,"20":525,"21":1,"22":28,"23":28,"24":28,"25":28,"26":28,"27":1,"28":28,"29":0,"30":28,"31":29,"32":28,"33":1,"34":28,"35":1,"36":28,"37":0,"38":28,"39":2,"40":0,"41":2,"42":0,"43":2,"44":2,"45":2,"46":2,"47":6,"48":2,"49":28,"50":28,"51":0,"52":28,"53":28,"54":28,"55":84,"56":28,"57":28,"58":1,"59":28,"60":2,"61":28,"62":2,"63":28,"64":4,"65":28,"66":26,"67":0,"68":26,"69":26,"70":26,"71":28,"72":7,"73":0,"74":7,"75":28,"76":2,"77":28,"78":2,"79":28,"80":28,"81":28,"82":28,"83":28,"84":26,"85":28,"86":1,"87":19,"88":1,"89":1,"90":155,"91":328,"92":1,"93":73,"94":232,"95":1,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":1,"104":3,"105":3,"106":3,"107":10,"108":3,"109":1,"110":180,"111":1,"112":28,"113":81,"114":3,"115":1,"116":64,"117":64,"118":64,"119":64,"120":64,"121":184,"122":4,"123":4,"124":64,"125":1,"126":2,"127":2,"128":2,"129":2,"130":6,"131":2,"132":1,"133":4,"134":12,"135":36,"136":0,"137":0,"138":1,"139":0,"140":0,"141":0,"142":1,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":1,"155":8,"156":8,"157":8,"158":8,"159":25,"160":8,"161":1,"162":52,"163":52,"164":52,"165":0,"166":52,"167":52,"168":52,"169":108,"170":108,"171":228,"172":52,"173":1,"174":28,"175":28,"176":28,"177":0,"178":28,"179":28,"180":28,"181":60,"182":60,"183":132,"184":28,"185":1,"186":40,"187":40,"188":40,"189":82,"190":82,"191":168,"192":40,"193":1,"194":0,"195":0,"196":0,"197":0,"198":1,"199":26,"200":0,"201":26,"202":26,"203":26,"204":26,"205":26,"206":26,"207":78,"208":78,"209":78,"210":78,"211":78,"212":78,"213":78,"214":78,"215":78,"216":78,"217":130,"218":26,"219":1,"220":7,"221":0,"222":7,"223":7,"224":7,"225":7,"226":21,"227":21,"228":21,"229":21,"230":21,"231":7,"232":7,"233":7,"234":21,"235":21,"236":21,"237":21,"238":21,"239":7,"240":1,"241":32,"242":32,"243":32,"244":0,"245":32,"246":32,"247":32,"248":68,"249":68,"250":148,"251":148,"252":332,"253":32,"254":1,"255":4,"256":4,"257":4,"258":4,"259":0,"260":4,"261":0,"262":4,"263":4,"264":4,"265":4,"266":4,"267":4,"268":4,"269":4,"270":12,"271":12,"272":36,"273":36,"274":4,"275":4,"276":4,"277":4,"278":12,"279":12,"280":36,"281":4,"282":1,"283":32,"284":32,"285":32,"286":28,"287":4,"288":4,"289":4,"290":4,"291":4,"292":4,"293":4,"294":4,"295":4,"296":4,"297":4,"298":4,"299":4,"300":4,"301":4,"302":4,"303":4,"304":4,"305":4,"306":4,"307":4,"308":4,"309":4,"310":8,"311":8,"312":16,"313":16,"314":16,"315":16,"316":4,"317":1,"318":1},"f":{"0":28,"1":1,"2":1,"3":525,"4":1,"5":28,"6":1,"7":0,"8":29,"9":1,"10":1,"11":0,"12":2,"13":28,"14":1,"15":2,"16":2,"17":4,"18":26,"19":7,"20":2,"21":2,"22":19,"23":155,"24":328,"25":73,"26":232,"27":0,"28":3,"29":180,"30":28,"31":81,"32":3,"33":64,"34":2,"35":4,"36":12,"37":36,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":8,"45":52,"46":28,"47":40,"48":0,"49":26,"50":7,"51":32,"52":4,"53":4,"54":32},"b":{"0":[0,28],"1":[1,1],"2":[0,1],"3":[1,0],"4":[0,1],"5":[0,525],"6":[0,2],"7":[0,2],"8":[0,28],"9":[1,1],"10":[0,26],"11":[0,7],"12":[1,1],"13":[28,0],"14":[28,28],"15":[26,2],"16":[26,2],"17":[26,2],"18":[174,6],"19":[27,1],"20":[63,1],"21":[4,180],"22":[4,0],"23":[0,0],"24":[0,0],"25":[0,52],"26":[52,52],"27":[0,28],"28":[28,28],"29":[0,0],"30":[0,0],"31":[0,26],"32":[0,7],"33":[7,0],"34":[31,1],"35":[32,0],"36":[0,32],"37":[4,0],"38":[4,4],"39":[0,4],"40":[4,4],"41":[0,4],"42":[4,4,4],"43":[32,0],"44":[32,32],"45":[28,4]},"inputSourceMap":{"version":3,"sources":["matrix.js"],"names":["Matrix","matrix","checkMatrixType","cloneMatrix","isMatrixSquare","_matrix","trace","getTranspose","printMatrix","Error","determinant","identityMatrix","createIdentityMatrix","rows","inverse","j","push","solveUsingLU","getCol","cols","det","i","upper","col","sumMatrices","subtractMatrices","Array","isArray","rowStart","rowEnd","colStart","colEnd","getSubMatrix","res","getLUDecomposition","lower","L","U","rightPart","ijkMultiplication","leafsize","strassenMultiplication","from","arguments","isSquare","length","luDecomposition","getDeterminant","row","fill","map","dim","min","max","createEmptyMatrix","Math","random","idMatrix","createEmptySquareMatrix","a","slice","n","_","iCol","x","console","log","luDecompostion","column","matrix1","matrix2","resMatrix","subMatrix","mat","k","y","sum","A","B","leafSize","nextPowerOfTow","pow","ceil","log2","m","ACopy","BCopy","CCopy","strassenAlgorithm","C","newSize","floor","A11","A12","A21","A22","B11","B12","B21","B22","M1","M2","M3","M4","M5","M6","M7","C11","C12","C21","C22"],"mappings":"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","sourceRoot":"C:\\Users\\paolo\\WebstormProjects\\linear-algebra.js\\src\\","sourcesContent":["class Matrix {\r\n    lower // The lower decomposition of the matrix using LU decomp\r\n    upper // The Upper decomposition of the matrix using LU decomp\r\n\r\n    /**\r\n     * Constructor of the matrix class\r\n     * @param {number[][]} matrix :  can be a bidimensional array or a list of\r\n     *                arrays\r\n     */\r\n    constructor (matrix) {\r\n      this._matrix = Array.isArray(matrix) && Array.isArray(matrix[0]) ? matrix : Array.from(arguments)\r\n      this.isSquare = this.isMatrixSquare()\r\n      this.rows = matrix.length\r\n      this.cols = this.isSquare ? this.rows : matrix[0].length\r\n      if (this.rows === this.cols) {\r\n        this.luDecomposition()\r\n      }\r\n      this.determinant = this.isSquare ? this.getDeterminant() : null\r\n    }\r\n\r\n    /**\r\n     * Create an empty matrix of the given dimension\r\n     * @param {number} row\r\n     * @param {number} col\r\n     * @returns {number[][]} return a empty matrix of the give dimension\r\n     */\r\n    static createEmptyMatrix = (row, col) => Array(row).fill().map(() => Array(col).fill(0));\r\n\r\n    /**\r\n     * Create an empty square matrix of the given dimension\r\n     * @param {number} dim  : dimension of the matrix\r\n     * @returns {number[][]} empty square matrix of the given dimension\r\n     */\r\n    static createEmptySquareMatrix = (dim) => Array(dim).fill().map(() => Array(dim).fill(0));\r\n\r\n    /**\r\n     *\r\n     * @param rows\r\n     * @param cols\r\n     * @param min\r\n     * @param max\r\n     * @returns {number[][]}\r\n     */\r\n    static createRandomMatrix = (rows, cols, min, max) => {\r\n      const matrix = Matrix.createEmptyMatrix(rows, cols)\r\n\r\n      for (let i = 0; i < matrix.length; i++) {\r\n        for (let j = 0; j < matrix[i].length; j++) { matrix[i][j] = Math.random() * (max - min) + min }\r\n      }\r\n\r\n      return matrix\r\n    };\r\n\r\n    /**\r\n     * Return the identity matrix of the given dimension\r\n     * @param {number} dim\r\n     * @returns {number[][]} Return the identity matrix of the given dimension\r\n     */\r\n    static createIdentityMatrix = (dim) => {\r\n      const idMatrix = Matrix.createEmptySquareMatrix(dim)\r\n\r\n      for (let i = 0; i < dim; i++) { idMatrix[i][i] = 1 }\r\n\r\n      return idMatrix\r\n    };\r\n\r\n    /**\r\n     * Method that return the two dimensional array that represent the matrix\r\n     * no matter if it passed a matrix object or a two dimensional array\r\n     * @param {number[][] | Matrix} matrix\r\n     * @returns {number[][]} the two dimensional array thar represent the matrix\r\n     */\r\n    static checkMatrixType = matrix => Array.isArray(matrix) ? matrix : matrix.matrix;\r\n\r\n    /**\r\n     * Method that return the two dimensional array that represent the matrix\r\n     * no matter if it passed a matrix object or a two dimensional array\r\n     * @param {number[][] | Matrix} matrix\r\n     * @returns {number[][]} the two dimensional array thar represent the matrix\r\n     */\r\n    checkMatrixType = matrix => Matrix.checkMatrixType(matrix);\r\n\r\n    /**\r\n     * Clone the matrix\r\n     * @returns {(Buffer | SharedArrayBuffer | T[] | BigUint64Array | Uint8ClampedArray | Uint32Array | Blob | Int16Array | T[] | Float64Array | string | Uint16Array | ArrayBuffer | Int32Array | Float32Array | BigInt64Array | Uint8Array | Int8Array | T[])[]}\r\n     */\r\n    static cloneMatrix = (matrix) => Array.isArray(matrix) ? matrix.map(a => a.slice()) : matrix._matrix.map(a => a.slice());\r\n\r\n    /**\r\n     * Get a copy of the matrix\r\n     * @returns {(Buffer|SharedArrayBuffer|T[]|BigUint64Array|Uint8ClampedArray|Uint32Array|Blob|Int16Array|Float64Array|string|Uint16Array|ArrayBuffer|Int32Array|Float32Array|BigInt64Array|Uint8Array|Int8Array)[]}\r\n     */\r\n    getCopy = () => Matrix.cloneMatrix(this.matrix);\r\n\r\n    /**\r\n     * static method that checks if a matrix is square\r\n     * @param {number[][] | Matrix} matrix\r\n     * @returns {boolean} true if is square otherwise false\r\n     */\r\n    static isMatrixSquare = (matrix) => {\r\n      // Check the matrix type\r\n      matrix = Array.isArray(matrix) ? matrix : matrix.matrix\r\n\r\n      let isSquare = true\r\n      const n = matrix.length // dimension of the matrix\r\n\r\n      for (let i = 0; i < n; i++) {\r\n        if (matrix[i].length !== n) {\r\n          isSquare = false\r\n          break\r\n        }\r\n      }\r\n\r\n      return isSquare\r\n    };\r\n\r\n    /**\r\n     * Check if a matrix is square\r\n     * @returns {boolean} true if is square otherwise false\r\n     */\r\n    isMatrixSquare = () => Matrix.isMatrixSquare(this._matrix);\r\n\r\n    /**\r\n     * If the passed matrix is square it return the trace of the given matrix\r\n     * @param {number[][] | Matrix} matrix\r\n     * @returns {number} the trace of the give matrix\r\n     */\r\n    static trace = matrix => {\r\n      // Check matrix type\r\n      matrix = Matrix.checkMatrixType(matrix)\r\n      // Initialize the trace\r\n      let trace = 0\r\n\r\n      for (let i = 0; i < matrix.length; i++) { trace += matrix[i][i] }\r\n\r\n      return trace\r\n    };\r\n\r\n    /**\r\n     * Return the matrix trace, if the matrix is square\r\n     * @returns {number} the trace of the matrix\r\n     */\r\n    getTrace = () => Matrix.trace(this.matrix);\r\n\r\n    /**\r\n     * Static function the return the transpose of the given matrix\r\n     * @param {number[][] | Matrix} matrix\r\n     * @returns {number[][]}\r\n     */\r\n    static getTranspose = matrix =>\r\n      Array.isArray(matrix) ? matrix[0].map((_, iCol) => matrix.map(row => row[iCol])) : matrix.matrix[0].map((_, iCol) => matrix.map(row => row[iCol]));\r\n\r\n    /**\r\n     * Get the transpose of the matrix\r\n     * @returns {*[][]} the transpose matrix\r\n     */\r\n    getTranspose = () =>\r\n      Matrix.getTranspose(this._matrix);\r\n\r\n    /**\r\n     * Static method for printing matrix\r\n     * @param { number[][] }matrix\r\n     */\r\n    static printMatrix = (matrix) => Array.isArray(matrix) ? matrix.map(x => console.log(x)) : matrix.matrix.map(x => console.log(x));\r\n\r\n    /**\r\n     * Print the matrix\r\n     */\r\n    printMatrix = () => Matrix.printMatrix(this._matrix);\r\n\r\n    // todo: to test\r\n    /**\r\n     * Static method that compute the inverse of the give matrix\r\n     * @param {number[][] | Matrix} matrix\r\n     * @returns {number[][]} Return the inverse of the given matrix\r\n     */\r\n    static getInverse = matrix => {\r\n      // todo: check if the determinant is different than zero\r\n      if (!Matrix.isMatrixSquare(matrix)) {\r\n        throw new Error(\"You can't get the inverse of a non square matrix\")\r\n      } else {\r\n        const identityMatrix = Matrix.createIdentityMatrix(this.rows)\r\n        const inverse = []\r\n        const { L, U } = Matrix.luDecompostion(matrix)\r\n\r\n        for (let j = 0; j < matrix.length; j++) { inverse.push(Matrix.solveUsingLU(L, U, Matrix.getCol(identityMatrix, j))) }\r\n\r\n        // Transpose the inverse before returning\r\n        return Matrix.getTranspose(inverse)\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Compute the inverse of a matrix\r\n     * @returns {Uint8Array|BigInt64Array|*[]|Float64Array|Int8Array|Float32Array|Int32Array|Uint32Array|Uint8ClampedArray|BigUint64Array|Int16Array|Uint16Array}\r\n     */\r\n    getInverse = () => {\r\n      if (!this.isMatrixSquare) {\r\n        throw new Error(\"You can't get the inverse of a non square matrix\")\r\n      }\r\n\r\n      if (this.determinant === 0) {\r\n        throw new Error('The determinant is 0! The inverse does not exist!')\r\n      } else {\r\n        const identityMatrix = Matrix.createIdentityMatrix(this.rows)\r\n        const inverse = []\r\n\r\n        for (let j = 0; j < this.rows; j++) {\r\n          inverse.push(this.solveUsingLU(Matrix.getCol(identityMatrix, j)))\r\n        }\r\n\r\n        // Transpose the inverse before returning\r\n        return Matrix.getTranspose(inverse)\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Compute the determinant of a matrix\r\n     * @returns {number}\r\n     */\r\n    getDeterminant = () => {\r\n      if (this.rows !== this.cols) {\r\n        throw new Error('Non square matrix has no determinant')\r\n      } else {\r\n        let det = 1\r\n        // the determinant it's just the product of the U diagonal\r\n        for (let i = 0; i < this.rows; i++) { det *= this.upper[i][i] }\r\n\r\n        return det\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Static method that return the input column of the given matrix\r\n     * @param {number[][] | Matrix} matrix\r\n     * @param {number} col the requested column\r\n     * @returns {number[]}  requested column in form of the col\r\n     */\r\n    static getCol = (matrix, col) => {\r\n      matrix = Matrix.checkMatrixType(matrix)\r\n\r\n      const column = []\r\n\r\n      for (let i = 0; i < matrix.length; i++) { column.push(matrix[i][col]) }\r\n\r\n      return column\r\n    };\r\n\r\n    /**\r\n     * return the given column of the matrix\r\n     * @param {number} col\r\n     * @returns {number[]} the request column of the matrix\r\n     */\r\n    getCol = col => Matrix.getCol(this.matrix, col);\r\n\r\n    /**\r\n     * Static method that compute sum sum of the given matrices\r\n     * @param {number[][] | Matrix} matrix1\r\n     * @param {number[][] | Matrix} matrix2\r\n     * @returns {number[][]}\r\n     */\r\n    static sumMatrices = (matrix1, matrix2) => {\r\n      // Check matrices types\r\n      matrix1 = Matrix.checkMatrixType(matrix1)\r\n      matrix2 = Matrix.checkMatrixType(matrix2)\r\n\r\n      if (matrix1.length !== matrix2.length || matrix1[0].length !== matrix2[0].length) {\r\n        throw new Error('Cannot sum two matrices with different dimension')\r\n      } else {\r\n        const resMatrix = Matrix.createEmptyMatrix(matrix1.length, matrix1[0].length)\r\n\r\n        for (let i = 0; i < matrix1.length; i++) {\r\n          for (let j = 0; j < matrix2.length; j++) { resMatrix[i][j] = matrix1[i][j] + matrix2[i][j] }\r\n        }\r\n\r\n        return resMatrix\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Instance method the compute the sum of two matrices calling the static method\r\n     * @param {number[][] | Matrix} matrix\r\n     * @returns {*[][]|undefined} the sum of the two matrices\r\n     */\r\n    sum = matrix =>\r\n      Matrix.sumMatrices(this._matrix, matrix);\r\n\r\n    /**\r\n     * Static method that compute the subtraction of two matrices\r\n     * @param matrix1\r\n     * @param matrix2\r\n     * @returns {*[][]} the substract matrix\r\n     */\r\n    static subtractMatrices = (matrix1, matrix2) => {\r\n      // Check matrices types\r\n      matrix1 = Matrix.checkMatrixType(matrix1)\r\n      matrix2 = Matrix.checkMatrixType(matrix2)\r\n\r\n      if (matrix1.length !== matrix2.length || matrix1[0].length !== matrix2[0].length) {\r\n        throw new Error('Cannot sum two matrices with different dimension')\r\n      } else {\r\n        const resMatrix = Matrix.createEmptyMatrix(matrix1.length, matrix1[0].length)\r\n\r\n        for (let i = 0; i < matrix1.length; i++) {\r\n          for (let j = 0; j < matrix2.length; j++) { resMatrix[i][j] = matrix1[i][j] - matrix2[i][j] }\r\n        }\r\n\r\n        return resMatrix\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Subtract the given matrix to the matrix object\r\n     * @param {number[][] | Matrix} matrix\r\n     * @returns {*[][]}\r\n     */\r\n    sub = matrix =>\r\n      Matrix.subtractMatrices(this._matrix, !Array.isArray(matrix) ? matrix.matrix : matrix);\r\n\r\n    /**\r\n     * Get a subMatrix of the given matrix\r\n     * @param {*[][]} matrix\r\n     * @param {number} rowStart\r\n     * @param {number} rowEnd\r\n     * @param {number} colStart\r\n     * @param {number} colEnd\r\n     * @returns {*[][]}\r\n     */\r\n    static getSubMatrix = (matrix, rowStart, rowEnd, colStart, colEnd) => {\r\n      const subMatrix = Matrix.createEmptyMatrix((rowEnd - rowStart) + 1, (colEnd - colStart) + 1)\r\n\r\n      for (let i = 0; i < subMatrix.length; i++) {\r\n        for (let j = 0; j < subMatrix[i].length; j++) { subMatrix[i][j] = matrix[rowStart + i][colStart + j] }\r\n      }\r\n\r\n      return subMatrix\r\n    };\r\n\r\n    /**\r\n     * Get the sub matrix\r\n     * @param {number} rowStart\r\n     * @param {number} rowEnd\r\n     * @param {number} colStart\r\n     * @param {number} colEnd\r\n     * @returns {number[][] | number[]} sub matrix\r\n     */\r\n    getSubMatrix = (rowStart, rowEnd, colStart, colEnd) => Matrix.getSubMatrix(this._matrix, rowStart, rowEnd, colStart, colEnd);\r\n\r\n    /**\r\n     * static method for the LU Decomposition of the given matrix\r\n     * @param {number[][] | Matrix } matrix\r\n     * @returns {{U: *[][], L: *[][]}} object containing the L and the U matrix\r\n     */\r\n    static luDecompostion = matrix => {\r\n      // Check matrix type\r\n      matrix = Array.isArray(matrix) ? matrix : matrix.matrix\r\n      // throw an error is the matrix is not square\r\n      if (!Matrix.isMatrixSquare(matrix)) {\r\n        throw new Error('You can do LU Decomposition only with Square matrices')\r\n      } else {\r\n        return Matrix.getLUDecomposition(matrix)\r\n      }\r\n    };\r\n\r\n    /**\r\n     * The LU Decomposition function that decompose the matrix in L and U\r\n     */\r\n    luDecomposition = () => {\r\n      // throw an error is the matrix is not square\r\n      if (!this.isMatrixSquare) {\r\n        throw new Error('You can do LU Decomposition only with Square matrices')\r\n      } else {\r\n        const res = Matrix.getLUDecomposition(this._matrix)\r\n\r\n        this.lower = res.L\r\n        this.upper = res.U\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Compute the LU decomposition of the given matrix\r\n     * @param {number[][] | Matrix} matrix\r\n     * @returns {{U: *[][], L: *[][]}} Object that contain U matrix and L matrix\r\n     */\r\n    static getLUDecomposition = (matrix) => {\r\n      // throw an error is the matrix is not square\r\n      if (!Matrix.isMatrixSquare(matrix)) {\r\n        throw new Error('You can do LU Decomposition only with Square matrices')\r\n      } else {\r\n        const mat = Matrix.cloneMatrix(matrix)\r\n        const n = matrix.length\r\n        const lower = Matrix.createEmptySquareMatrix(n); const upper = Matrix.createEmptySquareMatrix(n)\r\n\r\n        for (let k = 0; k < n; k++) {\r\n          lower[k][k] = 1\r\n          upper[k][k] = mat[k][k]\r\n\r\n          for (let i = k + 1; i < n; i++) {\r\n            lower[i][k] = (mat[i][k] / upper[k][k])\r\n            upper[k][i] = mat[k][i]\r\n          }\r\n\r\n          for (let i = k + 1; i < n; i++) {\r\n            for (let j = k + 1; j < n; j++) { mat[i][j] -= (lower[i][k] * upper[k][j]) }\r\n          }\r\n        }\r\n\r\n        return {\r\n          L: lower,\r\n          U: upper\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Static method that solves the linear system using lu decomposition\r\n     * @param lower\r\n     * @param upper\r\n     * @param rightPart\r\n     * @returns { number[] }\r\n     */\r\n    static solveUsingLU = (lower, upper, rightPart) => {\r\n      // throw an error is the matrix is not square\r\n      if (!Matrix.isMatrixSquare(lower) && !Matrix.isMatrixSquare(upper)) {\r\n        throw new Error('You can do LU Decomposition only with Square matrices')\r\n      } else {\r\n        const n = rightPart.length\r\n\r\n        // Calculate the solutions of Ly = b using forward substitution\r\n        const y = Array(n).fill(0)\r\n        for (let i = 0; i < n; i++) {\r\n          let sum = 0\r\n\r\n          for (let k = 0; k < i; k++) { sum += lower[i][k] * y[k] }\r\n\r\n          y[i] = (rightPart[i] - sum) / lower[i][i]\r\n        }\r\n\r\n        // Calculate the solution of Ux = y using back substitution\r\n        const x = Array(n).fill(0)\r\n        for (let i = n - 1; i >= 0; i--) {\r\n          let sum = 0\r\n\r\n          for (let k = i + 1; k < n; k++) { sum += upper[i][k] * x[k] }\r\n\r\n          x[i] = (1 / upper[i][i]) * (y[i] - sum)\r\n        }\r\n\r\n        return x\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Solve the linear system using lu decomposition\r\n     * @param rightPart\r\n     * @returns {number[]} solution of the linear system\r\n     */\r\n    solveUsingLU = (rightPart) => {\r\n      // throw an error is the matrix is not square\r\n      if (!this.isMatrixSquare) {\r\n        throw new Error('You can do LU Decomposition only with Square matrices')\r\n      } else {\r\n        return Matrix.solveUsingLU(this.lower, this.upper, rightPart)\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Compute the matrix multiplication using the naive method\r\n     * @param {number[][]| Matrix} matrix1\r\n     * @param {number[][]| Matrix} matrix2\r\n     * @returns {number[][]} the result of the product of the matrix1 and the matrix2\r\n     */\r\n    static ijkMultiplication = (matrix1, matrix2) => {\r\n      // Check  the inputs types\r\n      matrix1 = Array.isArray(matrix1) ? matrix1 : matrix1.matrix\r\n      matrix2 = Array.isArray(matrix2) ? matrix2 : matrix2.matrix\r\n      // check if the input matrix has the right dimension\r\n      if (matrix1[0].length !== matrix2.length) {\r\n        throw new Error('Cannot do the multiplication')\r\n      } else {\r\n        const resMatrix = Matrix.createEmptyMatrix(matrix1.length, matrix2[0].length)\r\n\r\n        // Compute the calculation\r\n        for (let i = 0; i < matrix1.length; i++) {\r\n          for (let j = 0; j < matrix2[0].length; j++) {\r\n            for (let k = 0; k < matrix1[0].length; k++) { resMatrix[i][j] += (matrix1[i][k] * matrix2[k][j]) }\r\n          }\r\n        }\r\n\r\n        return resMatrix\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Instance method that return thr multiplication of matrix\r\n     * @param {number[][]| Matrix} matrix\r\n     * @returns {number[][]}\r\n     */\r\n    ijkMultiplication = (matrix) =>\r\n      Matrix.ijkMultiplication(this._matrix, !Array.isArray(matrix) ? matrix.matrix : matrix);\r\n\r\n    /**\r\n     * Strassen multiplication method that calls the strassen algorithm\r\n     * @param {number[][] | Matrix } A\r\n     * @param {number[][] | Matrix } B\r\n     * @param {number} leafSize\r\n     * @returns {number[][]} the multiplication of the two matrices\r\n     */\r\n    static strassenMultiplication = (A, B, leafSize = 8) => {\r\n      // Check  the inputs types\r\n      A = Matrix.checkMatrixType(A)\r\n      B = Matrix.checkMatrixType(B)\r\n\r\n      // Check the input type\r\n      if (!(Array.isArray(A) && Array.isArray(B))) {\r\n        throw new Error('Type Error')\r\n      }\r\n\r\n      // Check if matrices are square matrices\r\n      if (!(A.length === A[0].length && B.length === B[0].length && A.length === B[0].length)) {\r\n        throw new Error(\"The matrices aren't square matrices\")\r\n      }\r\n\r\n      const nextPowerOfTow = n => Math.pow(2, Math.ceil(Math.log2(n)))\r\n      const n = A.length\r\n      const m = nextPowerOfTow(n)\r\n\r\n      const ACopy = Matrix.createEmptySquareMatrix(m)\r\n      const BCopy = Matrix.createEmptySquareMatrix(m)\r\n\r\n      // Copy the the matrices\r\n      for (let i = 0; i < n; i++) {\r\n        for (let j = 0; j < n; j++) {\r\n          ACopy[i][j] = A[i][j]\r\n          BCopy[i][j] = B[i][j]\r\n        }\r\n      }\r\n\r\n      const CCopy = Matrix.strassenAlgorithm(ACopy, BCopy, leafSize)\r\n      const C = Matrix.createEmptySquareMatrix(n)\r\n\r\n      for (let i = 0; i < n; i++) {\r\n        for (let j = 0; j < n; j++) { C[i][j] = CCopy[i][j] }\r\n      }\r\n\r\n      return C\r\n    };\r\n\r\n    /**\r\n     * Strassen multiplication of the two given matrices\r\n     * @param {number[][] | Matrix} matrix\r\n     * @param {number} leafsize\r\n     * @returns {number[][]}\r\n     */\r\n    strassenMultiplication = (matrix, leafsize) => Matrix.strassenMultiplication(this.matrix, matrix, leafsize);\r\n\r\n    /**\r\n     * Implementation of the Strassen algorithm\r\n     * @param {number[][]} A\r\n     * @param {number[][]} B\r\n     * @param {number} leafSize\r\n     * @returns {number[][]}\r\n     */\r\n    static strassenAlgorithm = function (A, B, leafSize = 8) {\r\n      const n = A.length\r\n      if (n <= leafSize) { return Matrix.ijkMultiplication(A, B) } else {\r\n        const newSize = Math.floor(n / 2)\r\n\r\n        // Create the A and B subMatrices\r\n        const A11 = Matrix.getSubMatrix(A, 0, newSize - 1, 0, newSize - 1)\r\n        const A12 = Matrix.getSubMatrix(A, 0, newSize - 1, newSize, n - 1)\r\n        const A21 = Matrix.getSubMatrix(A, newSize, n - 1, 0, Math.floor(newSize) - 1)\r\n        const A22 = Matrix.getSubMatrix(A, newSize, n - 1, newSize, n - 1)\r\n\r\n        const B11 = Matrix.getSubMatrix(B, 0, newSize - 1, 0, newSize - 1)\r\n        const B12 = Matrix.getSubMatrix(B, 0, newSize - 1, newSize, n - 1)\r\n        const B21 = Matrix.getSubMatrix(B, newSize, n - 1, 0, newSize - 1)\r\n        const B22 = Matrix.getSubMatrix(B, newSize, n - 1, newSize, n - 1)\r\n\r\n        // Seven matrices for the final result\r\n        const M1 = Matrix.strassenAlgorithm(Matrix.sumMatrices(A11, A22), Matrix.sumMatrices(B11, B22), leafSize)\r\n        const M2 = Matrix.strassenAlgorithm(Matrix.sumMatrices(A21, A22), B11, leafSize)\r\n        const M3 = Matrix.strassenAlgorithm(A11, Matrix.subtractMatrices(B12, B22), leafSize)\r\n        const M4 = Matrix.strassenAlgorithm(A22, Matrix.subtractMatrices(B21, B11), leafSize)\r\n        const M5 = Matrix.strassenAlgorithm(Matrix.sumMatrices(A11, A12), B22, leafSize)\r\n        const M6 = Matrix.strassenAlgorithm(Matrix.subtractMatrices(A21, A11), Matrix.sumMatrices(B11, B12), leafSize)\r\n        const M7 = Matrix.strassenAlgorithm(Matrix.subtractMatrices(A12, A22), Matrix.sumMatrices(B21, B22), leafSize)\r\n\r\n        const C11 = Matrix.sumMatrices(Matrix.subtractMatrices(Matrix.sumMatrices(M1, M4), M5), M7) // C11 = M1 + M4 - M5 + M7\r\n        const C12 = Matrix.sumMatrices(M3, M5) // C12 = M3 + M5\r\n        const C21 = Matrix.sumMatrices(M2, M4) // C21 = M2 + M4\r\n        const C22 = Matrix.sumMatrices(Matrix.sumMatrices(Matrix.subtractMatrices(M1, M2), M3), M6) // C22 = M1 - M2 + M3 + M6\r\n\r\n        const C = Matrix.createEmptySquareMatrix(n)\r\n\r\n        // Calculate C\r\n        for (let i = 0; i < newSize; i++) {\r\n          for (let j = 0; j < newSize; j++) {\r\n            C[i][j] = C11[i][j]\r\n            C[i][j + newSize] = C12[i][j]\r\n            C[i + newSize][j] = C21[i][j]\r\n            C[i + newSize][j + newSize] = C22[i][j]\r\n          }\r\n        }\r\n\r\n        return C\r\n      }\r\n    };\r\n\r\n    /**\r\n     * matrix attribute getter\r\n     * @returns {number[][]}\r\n     */\r\n    get matrix () {\r\n      return this._matrix\r\n    }\r\n}\r\n\r\nexport default Matrix\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6c74f648eb78563317bec3aa08d391d87367a2a8","contentHash":"d7524781e77ae72b1c956577dea0490c33263d46bbf2b08364b7267e170ed51a"},"C:\\Users\\paolo\\WebstormProjects\\linear-algebra.js\\src\\utils\\functions.js":{"path":"C:\\Users\\paolo\\WebstormProjects\\linear-algebra.js\\src\\utils\\functions.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":21}},"2":{"start":{"line":14,"column":10},"end":{"line":18,"column":1}},"3":{"start":{"line":15,"column":2},"end":{"line":17,"column":5}},"4":{"start":{"line":16,"column":4},"end":{"line":16,"column":24}},"5":{"start":{"line":20,"column":0},"end":{"line":20,"column":18}}},"fnMap":{"0":{"name":"zip","decl":{"start":{"line":14,"column":19},"end":{"line":14,"column":22}},"loc":{"start":{"line":14,"column":35},"end":{"line":18,"column":1}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":18},"end":{"line":15,"column":19}},"loc":{"start":{"line":15,"column":34},"end":{"line":17,"column":3}},"line":15}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":8,"4":27,"5":1},"f":{"0":8,"1":27},"b":{},"inputSourceMap":{"version":3,"sources":["functions.js"],"names":["zip","arr1","arr2","map","k","i"],"mappings":";;;;;;;AAAA;;;;;;AAMO,IAAMA,GAAG,GAAG,SAANA,GAAM,CAACC,IAAD,EAAOC,IAAP;AAAA,SAAgBD,IAAI,CAACE,GAAL,CAAS,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAU,CAACD,CAAD,EAAIF,IAAI,CAACG,CAAD,CAAR,CAAV;AAAA,GAAT,CAAhB;AAAA,CAAZ","sourceRoot":"C:\\Users\\paolo\\WebstormProjects\\linear-algebra.js\\src\\utils\\","sourcesContent":["/**\r\n * Returns a zip of the two given arrays\r\n * @param {*[][]} arr1\r\n * @param {number[]|Vector} arr2\r\n * @returns array[][] bidimensional array that is the zip between the two arrays\r\n */\r\nexport const zip = (arr1, arr2) => arr1.map((k, i) => [k, arr2[i]])\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"87dd3643540b9028693478d4b1627857c15381fa","contentHash":"d1bb6d256e90ec72e3103e5366bf7ca6e2b40d0a3c6eec4c8759b73f70063ccd"},"C:\\Users\\paolo\\WebstormProjects\\linear-algebra.js\\src\\vector.js":{"path":"C:\\Users\\paolo\\WebstormProjects\\linear-algebra.js\\src\\vector.js","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":5,"column":3}},"1":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"2":{"start":{"line":8,"column":17},"end":{"line":8,"column":45}},"3":{"start":{"line":10,"column":50},"end":{"line":10,"column":151}},"4":{"start":{"line":10,"column":92},"end":{"line":10,"column":149}},"5":{"start":{"line":12,"column":44},"end":{"line":12,"column":315}},"6":{"start":{"line":12,"column":57},"end":{"line":12,"column":58}},"7":{"start":{"line":12,"column":102},"end":{"line":12,"column":110}},"8":{"start":{"line":12,"column":112},"end":{"line":12,"column":167}},"9":{"start":{"line":12,"column":168},"end":{"line":12,"column":199}},"10":{"start":{"line":12,"column":200},"end":{"line":12,"column":254}},"11":{"start":{"line":12,"column":227},"end":{"line":12,"column":254}},"12":{"start":{"line":12,"column":255},"end":{"line":12,"column":313}},"13":{"start":{"line":14,"column":62},"end":{"line":14,"column":131}},"14":{"start":{"line":14,"column":78},"end":{"line":14,"column":131}},"15":{"start":{"line":14,"column":132},"end":{"line":14,"column":193}},"16":{"start":{"line":14,"column":149},"end":{"line":14,"column":193}},"17":{"start":{"line":14,"column":194},"end":{"line":14,"column":213}},"18":{"start":{"line":16,"column":44},"end":{"line":16,"column":195}},"19":{"start":{"line":16,"column":62},"end":{"line":16,"column":166}},"20":{"start":{"line":16,"column":176},"end":{"line":16,"column":193}},"21":{"start":{"line":16,"column":196},"end":{"line":16,"column":207}},"22":{"start":{"line":18,"column":26},"end":{"line":106,"column":3}},"23":{"start":{"line":24,"column":16},"end":{"line":24,"column":20}},"24":{"start":{"line":26,"column":4},"end":{"line":26,"column":34}},"25":{"start":{"line":28,"column":4},"end":{"line":30,"column":7}},"26":{"start":{"line":29,"column":6},"end":{"line":29,"column":42}},"27":{"start":{"line":32,"column":4},"end":{"line":34,"column":7}},"28":{"start":{"line":33,"column":6},"end":{"line":33,"column":43}},"29":{"start":{"line":36,"column":4},"end":{"line":38,"column":7}},"30":{"start":{"line":37,"column":6},"end":{"line":37,"column":57}},"31":{"start":{"line":40,"column":4},"end":{"line":42,"column":7}},"32":{"start":{"line":41,"column":6},"end":{"line":41,"column":55}},"33":{"start":{"line":44,"column":4},"end":{"line":46,"column":7}},"34":{"start":{"line":45,"column":6},"end":{"line":45,"column":55}},"35":{"start":{"line":48,"column":4},"end":{"line":50,"column":7}},"36":{"start":{"line":49,"column":6},"end":{"line":49,"column":47}},"37":{"start":{"line":52,"column":4},"end":{"line":52,"column":76}},"38":{"start":{"line":61,"column":2},"end":{"line":103,"column":6}},"39":{"start":{"line":69,"column":6},"end":{"line":69,"column":26}},"40":{"start":{"line":82,"column":6},"end":{"line":82,"column":66}},"41":{"start":{"line":83,"column":6},"end":{"line":83,"column":66}},"42":{"start":{"line":85,"column":6},"end":{"line":95,"column":7}},"43":{"start":{"line":86,"column":8},"end":{"line":86,"column":67}},"44":{"start":{"line":88,"column":24},"end":{"line":88,"column":26}},"45":{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},"46":{"start":{"line":90,"column":21},"end":{"line":90,"column":22}},"47":{"start":{"line":91,"column":10},"end":{"line":91,"column":50}},"48":{"start":{"line":94,"column":8},"end":{"line":94,"column":25}},"49":{"start":{"line":105,"column":2},"end":{"line":105,"column":16}},"50":{"start":{"line":108,"column":0},"end":{"line":110,"column":3}},"51":{"start":{"line":109,"column":2},"end":{"line":109,"column":25}},"52":{"start":{"line":112,"column":0},"end":{"line":118,"column":3}},"53":{"start":{"line":113,"column":2},"end":{"line":117,"column":9}},"54":{"start":{"line":114,"column":4},"end":{"line":114,"column":17}},"55":{"start":{"line":116,"column":4},"end":{"line":116,"column":17}},"56":{"start":{"line":120,"column":0},"end":{"line":124,"column":3}},"57":{"start":{"line":121,"column":2},"end":{"line":123,"column":5}},"58":{"start":{"line":122,"column":4},"end":{"line":122,"column":22}},"59":{"start":{"line":126,"column":0},"end":{"line":137,"column":3}},"60":{"start":{"line":128,"column":2},"end":{"line":128,"column":62}},"61":{"start":{"line":129,"column":2},"end":{"line":129,"column":62}},"62":{"start":{"line":130,"column":2},"end":{"line":136,"column":8}},"63":{"start":{"line":131,"column":4},"end":{"line":133,"column":10}},"64":{"start":{"line":132,"column":6},"end":{"line":132,"column":19}},"65":{"start":{"line":135,"column":4},"end":{"line":135,"column":17}},"66":{"start":{"line":139,"column":0},"end":{"line":149,"column":3}},"67":{"start":{"line":141,"column":11},"end":{"line":141,"column":60}},"68":{"start":{"line":142,"column":11},"end":{"line":142,"column":60}},"69":{"start":{"line":144,"column":2},"end":{"line":148,"column":3}},"70":{"start":{"line":145,"column":4},"end":{"line":145,"column":68}},"71":{"start":{"line":147,"column":4},"end":{"line":147,"column":105}},"72":{"start":{"line":152,"column":15},"end":{"line":152,"column":21}},"73":{"start":{"line":153,"column":0},"end":{"line":153,"column":30}}},"fnMap":{"0":{"name":"_classCallCheck","decl":{"start":{"line":10,"column":9},"end":{"line":10,"column":24}},"loc":{"start":{"line":10,"column":48},"end":{"line":10,"column":153}},"line":10},"1":{"name":"_defineProperties","decl":{"start":{"line":12,"column":9},"end":{"line":12,"column":26}},"loc":{"start":{"line":12,"column":42},"end":{"line":12,"column":317}},"line":12},"2":{"name":"_createClass","decl":{"start":{"line":14,"column":9},"end":{"line":14,"column":21}},"loc":{"start":{"line":14,"column":60},"end":{"line":14,"column":215}},"line":14},"3":{"name":"_defineProperty","decl":{"start":{"line":16,"column":9},"end":{"line":16,"column":24}},"loc":{"start":{"line":16,"column":42},"end":{"line":16,"column":209}},"line":16},"4":{"name":"(anonymous_4)","decl":{"start":{"line":18,"column":26},"end":{"line":18,"column":27}},"loc":{"start":{"line":18,"column":38},"end":{"line":106,"column":1}},"line":18},"5":{"name":"Vector","decl":{"start":{"line":23,"column":11},"end":{"line":23,"column":17}},"loc":{"start":{"line":23,"column":27},"end":{"line":53,"column":3}},"line":23},"6":{"name":"(anonymous_6)","decl":{"start":{"line":28,"column":37},"end":{"line":28,"column":38}},"loc":{"start":{"line":28,"column":49},"end":{"line":30,"column":5}},"line":28},"7":{"name":"(anonymous_7)","decl":{"start":{"line":32,"column":37},"end":{"line":32,"column":38}},"loc":{"start":{"line":32,"column":49},"end":{"line":34,"column":5}},"line":32},"8":{"name":"(anonymous_8)","decl":{"start":{"line":36,"column":43},"end":{"line":36,"column":44}},"loc":{"start":{"line":36,"column":61},"end":{"line":38,"column":5}},"line":36},"9":{"name":"(anonymous_9)","decl":{"start":{"line":40,"column":40},"end":{"line":40,"column":41}},"loc":{"start":{"line":40,"column":59},"end":{"line":42,"column":5}},"line":40},"10":{"name":"(anonymous_10)","decl":{"start":{"line":44,"column":42},"end":{"line":44,"column":43}},"loc":{"start":{"line":44,"column":60},"end":{"line":46,"column":5}},"line":44},"11":{"name":"(anonymous_11)","decl":{"start":{"line":48,"column":33},"end":{"line":48,"column":34}},"loc":{"start":{"line":48,"column":51},"end":{"line":50,"column":5}},"line":48},"12":{"name":"get","decl":{"start":{"line":68,"column":18},"end":{"line":68,"column":21}},"loc":{"start":{"line":68,"column":24},"end":{"line":70,"column":5}},"line":68},"13":{"name":"sum","decl":{"start":{"line":80,"column":20},"end":{"line":80,"column":23}},"loc":{"start":{"line":80,"column":42},"end":{"line":96,"column":5}},"line":80},"14":{"name":"(anonymous_14)","decl":{"start":{"line":108,"column":35},"end":{"line":108,"column":36}},"loc":{"start":{"line":108,"column":54},"end":{"line":110,"column":1}},"line":108},"15":{"name":"(anonymous_15)","decl":{"start":{"line":112,"column":35},"end":{"line":112,"column":36}},"loc":{"start":{"line":112,"column":53},"end":{"line":118,"column":1}},"line":112},"16":{"name":"(anonymous_16)","decl":{"start":{"line":113,"column":30},"end":{"line":113,"column":31}},"loc":{"start":{"line":113,"column":43},"end":{"line":115,"column":3}},"line":113},"17":{"name":"(anonymous_17)","decl":{"start":{"line":115,"column":12},"end":{"line":115,"column":13}},"loc":{"start":{"line":115,"column":28},"end":{"line":117,"column":3}},"line":115},"18":{"name":"(anonymous_18)","decl":{"start":{"line":120,"column":41},"end":{"line":120,"column":42}},"loc":{"start":{"line":120,"column":67},"end":{"line":124,"column":1}},"line":120},"19":{"name":"(anonymous_19)","decl":{"start":{"line":121,"column":20},"end":{"line":121,"column":21}},"loc":{"start":{"line":121,"column":33},"end":{"line":123,"column":3}},"line":121},"20":{"name":"(anonymous_20)","decl":{"start":{"line":126,"column":38},"end":{"line":126,"column":39}},"loc":{"start":{"line":126,"column":66},"end":{"line":137,"column":1}},"line":126},"21":{"name":"(anonymous_21)","decl":{"start":{"line":130,"column":51},"end":{"line":130,"column":52}},"loc":{"start":{"line":130,"column":64},"end":{"line":134,"column":3}},"line":130},"22":{"name":"(anonymous_22)","decl":{"start":{"line":131,"column":20},"end":{"line":131,"column":21}},"loc":{"start":{"line":131,"column":36},"end":{"line":133,"column":5}},"line":131},"23":{"name":"(anonymous_23)","decl":{"start":{"line":134,"column":12},"end":{"line":134,"column":13}},"loc":{"start":{"line":134,"column":28},"end":{"line":136,"column":3}},"line":134},"24":{"name":"(anonymous_24)","decl":{"start":{"line":139,"column":40},"end":{"line":139,"column":41}},"loc":{"start":{"line":139,"column":68},"end":{"line":149,"column":1}},"line":139}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":50},"end":{"line":10,"column":151}},"type":"if","locations":[{"start":{"line":10,"column":50},"end":{"line":10,"column":151}},{"start":{"line":10,"column":50},"end":{"line":10,"column":151}}],"line":10},"1":{"loc":{"start":{"line":12,"column":136},"end":{"line":12,"column":166}},"type":"binary-expr","locations":[{"start":{"line":12,"column":136},"end":{"line":12,"column":157}},{"start":{"line":12,"column":161},"end":{"line":12,"column":166}}],"line":12},"2":{"loc":{"start":{"line":12,"column":200},"end":{"line":12,"column":254}},"type":"if","locations":[{"start":{"line":12,"column":200},"end":{"line":12,"column":254}},{"start":{"line":12,"column":200},"end":{"line":12,"column":254}}],"line":12},"3":{"loc":{"start":{"line":14,"column":62},"end":{"line":14,"column":131}},"type":"if","locations":[{"start":{"line":14,"column":62},"end":{"line":14,"column":131}},{"start":{"line":14,"column":62},"end":{"line":14,"column":131}}],"line":14},"4":{"loc":{"start":{"line":14,"column":132},"end":{"line":14,"column":193}},"type":"if","locations":[{"start":{"line":14,"column":132},"end":{"line":14,"column":193}},{"start":{"line":14,"column":132},"end":{"line":14,"column":193}}],"line":14},"5":{"loc":{"start":{"line":16,"column":44},"end":{"line":16,"column":195}},"type":"if","locations":[{"start":{"line":16,"column":44},"end":{"line":16,"column":195}},{"start":{"line":16,"column":44},"end":{"line":16,"column":195}}],"line":16},"6":{"loc":{"start":{"line":52,"column":19},"end":{"line":52,"column":75}},"type":"cond-expr","locations":[{"start":{"line":52,"column":44},"end":{"line":52,"column":51}},{"start":{"line":52,"column":54},"end":{"line":52,"column":75}}],"line":52},"7":{"loc":{"start":{"line":82,"column":16},"end":{"line":82,"column":65}},"type":"cond-expr","locations":[{"start":{"line":82,"column":41},"end":{"line":82,"column":48}},{"start":{"line":82,"column":51},"end":{"line":82,"column":65}}],"line":82},"8":{"loc":{"start":{"line":83,"column":16},"end":{"line":83,"column":65}},"type":"cond-expr","locations":[{"start":{"line":83,"column":41},"end":{"line":83,"column":48}},{"start":{"line":83,"column":51},"end":{"line":83,"column":65}}],"line":83},"9":{"loc":{"start":{"line":85,"column":6},"end":{"line":95,"column":7}},"type":"if","locations":[{"start":{"line":85,"column":6},"end":{"line":95,"column":7}},{"start":{"line":85,"column":6},"end":{"line":95,"column":7}}],"line":85},"10":{"loc":{"start":{"line":128,"column":12},"end":{"line":128,"column":61}},"type":"cond-expr","locations":[{"start":{"line":128,"column":37},"end":{"line":128,"column":44}},{"start":{"line":128,"column":47},"end":{"line":128,"column":61}}],"line":128},"11":{"loc":{"start":{"line":129,"column":12},"end":{"line":129,"column":61}},"type":"cond-expr","locations":[{"start":{"line":129,"column":37},"end":{"line":129,"column":44}},{"start":{"line":129,"column":47},"end":{"line":129,"column":61}}],"line":129},"12":{"loc":{"start":{"line":141,"column":11},"end":{"line":141,"column":60}},"type":"cond-expr","locations":[{"start":{"line":141,"column":36},"end":{"line":141,"column":43}},{"start":{"line":141,"column":46},"end":{"line":141,"column":60}}],"line":141},"13":{"loc":{"start":{"line":142,"column":11},"end":{"line":142,"column":60}},"type":"cond-expr","locations":[{"start":{"line":142,"column":36},"end":{"line":142,"column":43}},{"start":{"line":142,"column":46},"end":{"line":142,"column":60}}],"line":142},"14":{"loc":{"start":{"line":144,"column":2},"end":{"line":148,"column":3}},"type":"if","locations":[{"start":{"line":144,"column":2},"end":{"line":148,"column":3}},{"start":{"line":144,"column":2},"end":{"line":148,"column":3}}],"line":144},"15":{"loc":{"start":{"line":144,"column":6},"end":{"line":144,"column":40}},"type":"binary-expr","locations":[{"start":{"line":144,"column":6},"end":{"line":144,"column":21}},{"start":{"line":144,"column":25},"end":{"line":144,"column":40}}],"line":144}},"s":{"0":1,"1":1,"2":1,"3":12,"4":0,"5":2,"6":2,"7":2,"8":2,"9":2,"10":2,"11":1,"12":2,"13":1,"14":1,"15":1,"16":1,"17":1,"18":77,"19":0,"20":77,"21":77,"22":1,"23":12,"24":12,"25":12,"26":1,"27":12,"28":2,"29":12,"30":1,"31":12,"32":1,"33":12,"34":1,"35":12,"36":1,"37":12,"38":1,"39":13,"40":2,"41":2,"42":2,"43":0,"44":2,"45":2,"46":2,"47":6,"48":2,"49":1,"50":1,"51":1,"52":1,"53":3,"54":9,"55":9,"56":1,"57":1,"58":3,"59":1,"60":2,"61":2,"62":2,"63":6,"64":12,"65":6,"66":1,"67":2,"68":2,"69":2,"70":0,"71":2,"72":1,"73":1},"f":{"0":12,"1":2,"2":1,"3":77,"4":1,"5":12,"6":1,"7":2,"8":1,"9":1,"10":1,"11":1,"12":13,"13":2,"14":1,"15":3,"16":9,"17":9,"18":1,"19":3,"20":2,"21":6,"22":12,"23":6,"24":2},"b":{"0":[0,12],"1":[2,2],"2":[1,1],"3":[1,0],"4":[1,0],"5":[0,77],"6":[11,1],"7":[1,1],"8":[0,2],"9":[0,2],"10":[1,1],"11":[0,2],"12":[1,1],"13":[0,2],"14":[0,2],"15":[2,0]},"inputSourceMap":{"version":3,"sources":["vector.js"],"names":["Vector","vector","getCopy","getNorm","_vector","scalar","scalarProduct","vector2","dotProduct","crossProduct","sum","Array","isArray","from","arguments","vector1","length","Error","sumVector","i","push","slice","Math","sqrt","map","x","reduce","a","b","x1","x2"],"mappings":"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","sourceRoot":"C:\\Users\\paolo\\WebstormProjects\\linear-algebra.js\\src\\","sourcesContent":["import { zip } from './utils/functions'\r\n\r\nclass Vector {\r\n  /**\r\n     * Constructor of the vector Object\r\n     * @param vector can be an array of a list of integers\r\n     */\r\n  constructor (vector) {\r\n    this._vector = Array.isArray(vector) ? vector : Array.from(arguments)\r\n  }\r\n\r\n    /**\r\n     *\r\n     * @param {number[]} vector1\r\n     * @returns {number[]}\r\n     */\r\n    static getCopy = (vector1) => vector1.slice();\r\n\r\n    /**\r\n     *\r\n     * @returns {*}\r\n     */\r\n    getCopy = () => Vector.getCopy(this.vector);\r\n\r\n    /**\r\n     * Static method that compute the norm of a vector\r\n     * @param {number[]} vector\r\n     * @returns {number} the norm of a vector\r\n     */\r\n    static getNorm = (vector) => Math.sqrt(vector.map(x => x * x).reduce((a, b) => a + b, 0));\r\n\r\n    /**\r\n     * Compute the norm of a vector\r\n     * @returns {number}: the norm of a vector\r\n     */\r\n    getNorm = () => Vector.getNorm(this._vector);\r\n\r\n    /**\r\n     *\r\n     * @param vector\r\n     * @param scalar\r\n     * @returns {*|Uint8Array|BigInt64Array|number[]|Float64Array|Int8Array|Float32Array|Int32Array|Uint32Array|Uint8ClampedArray|BigUint64Array|Int16Array|Uint16Array}\r\n     */\r\n    static scalarProduct = (vector, scalar) => vector.map(x => x * scalar);\r\n\r\n    /**\r\n     * Compute the scalarProduct\r\n     * @param {number} scalar\r\n     * @returns {number[]}: the scalar product of the vector\r\n     */\r\n    scalarProduct = (scalar) => Vector.scalarProduct(this._vector, scalar);\r\n\r\n    /**\r\n     * Compute the product column vector for row vector (static method)\r\n     * @param {number[] | Vector} vector1\r\n     * @param {number[] | Vector} vector2\r\n     * @returns {number} the product of the row vector and the col vector\r\n     */\r\n    static dotProduct = (vector1, vector2) => {\r\n      // Check vectors type\r\n      vector1 = Array.isArray(vector1) ? vector1 : vector1.vector\r\n      vector2 = Array.isArray(vector2) ? vector2 : vector2.vector\r\n\r\n      return (zip(vector1, vector2).map(x => x.reduce((a, b) => a * b, 1))).reduce((a, b) => a + b, 0)\r\n    }\r\n\r\n    /**\r\n     * Compute the product column vector for row vector\r\n     * @param {*[]} vector2\r\n     * @returns {number} the product of the row vector and the col vector\r\n     */\r\n    dotProduct = (vector2) => Vector.dotProduct(this._vector, vector2);\r\n\r\n    /**\r\n     * Compute the cross product between two 3D Vector\r\n     * @param {number[] | Vector} vector1\r\n     * @param {number[] | Vector} vector2\r\n     * @returns {number[]} the cross product between vector1 and vector2\r\n     */\r\n    static crossProduct = (vector1, vector2) => {\r\n      // Check Vector Type\r\n      const x1 = Array.isArray(vector1) ? vector1 : vector1.vector\r\n      const x2 = Array.isArray(vector2) ? vector2 : vector2.vector\r\n      // Cross product of two 3D vectors.\r\n      if (x1.length !== 3 && x2.length !== 3) {\r\n        throw new Error('crossProduct is defined only for 3d vectors.')\r\n      } else {\r\n        return [\r\n          x1[1] * x2[2] - x1[2] * x2[1],\r\n          x1[2] * x2[0] - x1[0] * x2[2],\r\n          x1[0] * x2[1] - x1[1] * x2[0]\r\n        ]\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Compute the cross product with the give 3D Vector\r\n     * @param {number[] | Vector} vector\r\n     * @returns {number[]} the cross product between vector1 and vector2\r\n     */\r\n    crossProduct = (vector) => Vector.crossProduct(this.vector, vector);\r\n\r\n    /**\r\n     * Compute the sum of the two vectors (static method)\r\n     * @param {number[] | Vector} vector1\r\n     * @param {number[] | Vector} vector2\r\n     * @returns {number[]} The sum of the two vectors\r\n     */\r\n    static sum (vector1, vector2) {\r\n      // Check the input types\r\n      vector1 = Array.isArray(vector1) ? vector1 : vector1.vector\r\n      vector2 = Array.isArray(vector2) ? vector2 : vector2.vector\r\n\r\n      if (vector1.length !== vector2.length) {\r\n        throw new Error(\"The two vectors haven't the same Length\")\r\n      } else {\r\n        const sumVector = []\r\n\r\n        for (let i = 0; i < vector1.length; i++) { sumVector.push(vector1[i] + vector2[i]) }\r\n\r\n        return sumVector\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Sum the vector with the given vector (instance method)\r\n     * @param {*[]} vector\r\n     * @returns {number[]} the sum of the two vectors\r\n     */\r\n    sum = (vector) => Vector.sum(this._vector, vector);\r\n\r\n    /**\r\n     * vector field getter\r\n     * @returns {number[] }\r\n     */\r\n    get vector () {\r\n      return this._vector\r\n    }\r\n};\r\n\r\nexport default Vector\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c40a7a2c64e25eaedb9d79bef02e0e74686501a3","contentHash":"37ca351a01a22ac77843f21b2c07f5789781e873b46707236c64c443adff3f2f"}}